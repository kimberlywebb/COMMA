EM_function_normalY_3 <- function(param_current,
                                obs_mediator, obs_outcome,
                                X, Z, c_matrix,
                                sample_size, n_cat){

  beta_current = matrix(param_current[1:3], ncol = 1)
  gamma_current = matrix(c(param_current[4:7]),
                         ncol = n_cat, byrow = FALSE)
  theta_current = matrix(c(param_current[8:11]),
                         ncol = 1)
  sigma_current = matrix(param_current[12])

  design_matrix = cbind(X, c_matrix)
  probabilities = pi_compute(beta_current, design_matrix, sample_size, n_cat)
  conditional_probabilities = pistar_compute(gamma_current, Z, sample_size, n_cat)
  p_yi_m0 = p_normal_yi(theta_v = theta_current,
                        sigma_v = sigma_current,
                        m = 0, x = X[,2], c = c_matrix,
                        outcome = obs_outcome,
                        sample_size, n_cat)
  p_yi_m1 = p_normal_yi(theta_v = theta_current,
                        sigma_v = sigma_current,
                        m = 1, x = X[,2], c = c_matrix,
                        outcome = obs_outcome,
                        sample_size, n_cat)

  mstar_matrix = matrix(c(ifelse(obs_mediator == 1, 1, 0), 
                          ifelse(obs_mediator == 2, 1, 0)),
                        nrow = sample_size, byrow = FALSE)
  weights = w_m(mstar_matrix,
                pistar_matrix = conditional_probabilities,
                pi_matrix = probabilities,
                p_yi_m0, p_yi_m1,
                sample_size, n_cat)

  Mstar01 = mstar_matrix[,1]
  fit.gamma1 <- suppressWarnings( stats::glm(Mstar01 ~ . + 0, as.data.frame(Z),
                           weights = weights[,1],
                           family = "binomial"(link = "logit")) )
  gamma1_new <- unname(coefficients(fit.gamma1))

  fit.gamma2 <- suppressWarnings( stats::glm(Mstar01 ~ . + 0, as.data.frame(Z),
                           weights = weights[,2],
                           family = "binomial"(link = "logit")) )
  gamma2_new <- unname(coefficients(fit.gamma2))

  fit.beta <- suppressWarnings( stats::glm(weights[,1] ~ . + 0, as.data.frame(design_matrix),
                         family = stats::binomial()) )
  beta_new <- unname(coefficients(fit.beta))

  theta_0_update <- (1 / sample_size) *
    sum(obs_outcome - theta_current[2] * X[,2] - theta_current[4] * c_matrix
        - theta_current[3] * weights[,1])
  
  theta_x_update <- (1 / sum(X[,2] ^ 2)) *
    sum(X[,2] * (obs_outcome - theta_current[1] - theta_current[4] * c_matrix
        - theta_current[3] * weights[,1]))
  
  theta_c_update <- (1 / sum(c_matrix ^ 2)) *
    sum(c_matrix * (obs_outcome - theta_current[1] - theta_current[2] * X[,2]
             - theta_current[3] * weights[,1]))
  
  theta_m_update <- (1 / sum(weights[,1])) *
    sum(weights[,1] * (obs_outcome - theta_current[1] - theta_current[2] * X[,2]
             - theta_current[4] * c_matrix))
  
  sigma_update <- (1 / sample_size) * sum(
    ((obs_outcome - theta_current[1] - theta_current[2] * X[,2]
      - theta_current[4] * c_matrix) ^ 2)
    - 2 * theta_current[3] * weights[,1] * (obs_outcome - theta_current[1] - theta_current[2] * X[,2]
                                            - theta_current[4] * c_matrix)
     + (theta_current[3] ^ 2 * weights[,1])
  )
  
  theta_new <- c(theta_0_update, theta_x_update, theta_m_update, theta_c_update)
  
  sigma_new <- sigma_update
  
  param_new = c(beta_new, gamma1_new, gamma2_new, theta_new, sigma_new)
  param_current = param_new
  return(param_new)

}




