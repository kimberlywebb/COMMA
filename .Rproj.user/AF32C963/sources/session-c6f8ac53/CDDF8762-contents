# Testing out a mediation model with a misclassified binary mediator and binary outcome.

function_directory <- "C:/Users/hochsted/Dropbox/Misclassification/Code/Mediation/em_mediation_2023-05-09/functions/"
source_files <- list.files(function_directory, pattern = "*.R")
for (i in 1:length(source_files)) {
  source(paste0(function_directory, source_files[i]))
}

save_directory <- "C:/Users/hochsted/Dropbox/Misclassification/Code/Mediation/em_mediation_2023-05-09/"

library(dplyr)
library(ggplot2)
library(stringr)
library(splines)

set.seed(1)
sample_size <- 2000
n_cat <- 2
x_mu <- 0
x_sigma <- 1
z_shape <- 1
z_scale <- 1
c_shape <- 1

true_beta <- matrix(c(-.7, -1, .5), ncol = 1)
true_gamma <- matrix(c(1.8, 1, -1.5, -1), nrow = 2, byrow = FALSE)
true_theta <- matrix(c(1, 1.5, -2, -.2), ncol = 1)

data <- mediation_data_normalY(sample_size,
                               x_mu, x_sigma, z_shape, z_scale, c_shape,
                               true_beta, true_gamma, true_theta)

table(data[["obs_mediator"]], data[["true_mediator"]])

true_se <- length(which(data[["obs_mediator"]] == 1 & data[["true_mediator"]] == 1)) /
  length(which(data[["true_mediator"]] == 1))
true_sp <- length(which(data[["obs_mediator"]] == 2 & data[["true_mediator"]] == 2)) /
  length(which(data[["true_mediator"]] == 2))
true_obs1 <- length(which(data[["obs_mediator"]] == 1)) / sample_size

true_obs1 < true_se
true_obs1 > (1 - true_sp)

# Make very tight distributions for misclassification terms
true_pistar <- pistar_compute(true_gamma, matrix(c(rep(1, sample_size),
                                                   data[["z"]]),
                                                 nrow = sample_size,
                                                 byrow = FALSE),
                              sample_size, 2)
hist(true_pistar[(sample_size + 1):(2 * sample_size), 1])
summary(true_pistar[(sample_size + 1):(2 * sample_size), 1])
hist(true_pistar[1:sample_size, 2])
summary(true_pistar[1:sample_size, 2])

start_beta <- matrix(rep(1, 3), ncol = 1)
start_gamma <- matrix(rep(1, 4), nrow = 2, ncol = 2)
start_theta <- matrix(rep(1, 4), ncol = 1)
start_sigma <- 1
mediation_results <- mediation_EM_normalY_4(Mstar = data[["obs_mediator"]],
                                          outcome = data[["outcome"]],
                                          x_matrix = data[["x"]],
                                          z_matrix = data[["z"]],
                                          c_matrix = data[["c"]],
                                          beta_start = start_beta,
                                          gamma_start = start_gamma,
                                          theta_start = start_theta,
                                          sigma_start = start_sigma,
                                          tolerance = 1e-7,
                                          max_em_iterations = 1500,
                                          em_method = "squarem")
mediation_results

mediation_results_new <- mediation_EM_normalY_3(Mstar = data[["obs_mediator"]],
                                            outcome = data[["outcome"]],
                                            x_matrix = data[["x"]],
                                            z_matrix = data[["z"]],
                                            c_matrix = data[["c"]],
                                            beta_start = start_beta,
                                            gamma_start = start_gamma,
                                            theta_start = start_theta,
                                            sigma_start = start_sigma,
                                            tolerance = 1e-7,
                                            max_em_iterations = 1500,
                                            em_method = "squarem")

predicted_beta <- matrix(mediation_results$Estimates[1:3], ncol = 1)
predicted_gamma <- matrix(mediation_results$Estimates[4:7], 
                          ncol = 2, byrow = FALSE)
predicted_theta <- matrix(mediation_results$Estimates[8:11], ncol = 1)
predicted_sigma <- mediation_results$Estimates[12]

set.seed(123)
n_sim <- 30
my_results <- NULL
sim_indicator <- NULL
actual_theta_results <- NULL
for(i in 1:n_sim){
  
  sample_size <- 10000
  n_cat <- 2
  x_mu <- 0
  x_sigma <- 1
  z_shape <- 1
  z_scale <- 1
  c_shape <- 1
  
  true_beta <- matrix(c(-.7, -1, .5), ncol = 1)
  true_gamma <- matrix(c(1.8, 1, -1.5, -1), nrow = 2, byrow = FALSE)
  true_theta <- matrix(c(1, 1.5, -2, -.2), ncol = 1)
  
  data <- mediation_data_normalY(sample_size,
                                 x_mu, x_sigma, z_shape, z_scale, c_shape,
                                 true_beta, true_gamma, true_theta)
  
  table(data[["obs_mediator"]], data[["true_mediator"]])
  
  true_se <- length(which(data[["obs_mediator"]] == 1 & data[["true_mediator"]] == 1)) /
    length(which(data[["true_mediator"]] == 1))
  true_sp <- length(which(data[["obs_mediator"]] == 2 & data[["true_mediator"]] == 2)) /
    length(which(data[["true_mediator"]] == 2))
  true_obs1 <- length(which(data[["obs_mediator"]] == 1)) / sample_size
  
  true_obs1 < true_se
  true_obs1 > (1 - true_sp)
  
  mstar_01 <- ifelse(data[["obs_mediator"]] == 1, 1, 0)
  mstar_data <- data.frame(mstar_01, x = data[["x"]],
                           c = data[["c"]], z = data[["z"]],
                           y = data[["outcome"]])
  mstar_model <- glm(mstar_01 ~ ns(y, 4) + ns(x, 4) + ns(c, 4) +
                       ns(x*c, 4) + ns(y*c, 4) + ns(z, 4),
                     data = mstar_data, family = "binomial")
  mstar_predictions <- predict(mstar_model, newdata = mstar_data, "response")
  
  # Assumption violations
  length(which(mstar_predictions >= true_se))
  length(which(mstar_predictions <= 1 - true_sp))
  
  # Make very tight distributions for misclassification terms
  true_pistar <- pistar_compute(true_gamma, matrix(c(rep(1, sample_size),
                                                     data[["z"]]),
                                                   nrow = sample_size,
                                                   byrow = FALSE),
                                sample_size, 2)
  hist(true_pistar[(sample_size + 1):(2 * sample_size), 1])
  summary(true_pistar[(sample_size + 1):(2 * sample_size), 1])
  hist(true_pistar[1:sample_size, 2])
  summary(true_pistar[1:sample_size, 2])
  
  start_beta <- matrix(rep(1, 3), ncol = 1)
  start_gamma <- matrix(rep(1, 4), nrow = 2, ncol = 2)
  start_theta <- matrix(rep(1, 4), ncol = 1)
  start_sigma <- 1
  mediation_results <- mediation_EM_normalY_4(Mstar = data[["obs_mediator"]],
                                            outcome = data[["outcome"]],
                                            x_matrix = data[["x"]],
                                            z_matrix = data[["z"]],
                                            c_matrix = data[["c"]],
                                            beta_start = start_beta,
                                            gamma_start = start_gamma,
                                            theta_start = start_theta,
                                            sigma_start = start_sigma,
                                            tolerance = 1e-7,
                                            max_em_iterations = 1500,
                                            em_method = "squarem")
  
  results_i <- mediation_results$Estimates
  
  my_results <- c(my_results, results_i)
  sim_indicator <- c(sim_indicator, rep(i, 12))
  
  print(paste("Done with simulation", i))
}

sim_results <- data.frame(estimate = my_results,
                          sim = rep(1:n_sim, each = 12),
                          parameter = rep(c("beta_0", "beta_c", "beta_x",
                                            "gamma_11", "gamma_21",
                                            "gamma_12", "gamma_22",
                                            "theta_0", "theta_x", "theta_m","theta_c",
                                            "sigma"),
                                          n_sim),
                          true_value = rep(c(c(true_beta), c(true_gamma),
                                             c(true_theta), 1), n_sim))

sim_results %>%
  group_by(parameter, true_value) %>%
  summarise(mean_estimate = mean(estimate),
            sd_estimate = sd(estimate)) %>%
  ungroup() %>%
  mutate(true_value = c(-.7, -1, .5, 1.8, -1.5, 1, -1, 1, 1, -.2, -2, 1.5))

ggplot(data = sim_results %>% filter(str_detect(parameter, "theta"))) +
  geom_histogram(aes(x = estimate, fill = parameter),
                 color = "grey40", bins = 100) +
  geom_vline(aes(xintercept = as.numeric(true_value))) +
  theme_minimal() +
  #scale_fill_manual(values = c("plum4", "hotpink", "springgreen4", "grey60", "dodgerblue1")) +
  facet_wrap(~parameter)

ggplot(data = sim_results) +
  geom_histogram(aes(x = estimate, fill = parameter),
                 color = "grey40", bins = 25) +
  geom_vline(aes(xintercept = as.numeric(true_value))) +
  theme_minimal() +
  #scale_fill_manual(values = c("plum4", "hotpink", "springgreen4", "grey60", "dodgerblue1")) +
  facet_wrap(~parameter)

ggplot(data = sim_results %>% filter(str_detect(parameter, "gamma"))) +
  geom_histogram(aes(x = estimate, fill = parameter),
                 color = "grey40", bins = 25) +
  geom_vline(aes(xintercept = as.numeric(true_value))) +
  theme_minimal() +
  #scale_fill_manual(values = c("plum4", "hotpink", "springgreen4", "grey60", "dodgerblue1")) +
  facet_wrap(~parameter)

save(sim_results, file = paste0(save_directory, "normalY_EM_results_2_2023-05-16.RData"))
