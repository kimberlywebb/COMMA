# Trying out a penalized regression approach for misclassification models.

# Load necessary packages.
library(COMBO)
library(dplyr)
library(ggplot2)

save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Code/EM_Multinom_Misclass/Penalized_Regression/misclassification_pl/test_decaying_lambda_2024-06-13/"

################################################################################

# Write a penalized likelihood function.
penalized_likelihood <- function(regression_parameters, lambda, 
                                 x, z, ystar){
  
  beta_terms <- regression_parameters[1:2]
  gamma_terms <- regression_parameters[3:6]
  
  pi_terms <- exp(beta_terms[1] + beta_terms[2] * x) /
    (1 + exp(beta_terms[1] + beta_terms[2] * x))
  
  pistar_terms_1 <- exp(gamma_terms[1] + gamma_terms[2] * z) /
    (1 + exp(gamma_terms[1] + gamma_terms[2] * z))
  pistar_terms_2 <- exp(gamma_terms[3] + gamma_terms[4] * z) /
    (1 + exp(gamma_terms[4] + gamma_terms[4] * z))
  
  ystar_01_matrix <- matrix(c(ifelse(ystar == 1, 1, 0), 
                              ifelse(ystar == 2, 1, 0)),
                            ncol = 2, byrow = FALSE)
  
  obs_loglikelihood <- sum((ystar_01_matrix[,1] *
                              log(pistar_terms_1 * pi_terms +
                                    pistar_terms_2 * (1 - pi_terms))) +
                             (ystar_01_matrix[,2] *
                                log((1 - pistar_terms_1) * pi_terms +
                                      (1 - pistar_terms_2) * (1 - pi_terms))))
  
  mean_pistar11 <- mean(pistar_terms_1)
  mean_pistar22 <- mean(1 - pistar_terms_2)
  penalization_term <- lambda * (log(mean_pistar11) + log(mean_pistar22))
  
  loglike_sum <- obs_loglikelihood + penalization_term
  
  return(loglike_sum)
}

################################################################################

# Test out decaying lambda

lambda_decay <- c(50, 30, 15, 10, 5, 2, 1, .9, .8, .7, .6, .5, .4, .3, .2, .1, 0)
n_sim <- 50

# This is close to simulation setting #1 in the COMBO paper. 
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1

true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_parameters <- c(true_beta, c(true_gamma))

lambda_tracker <- NULL
param_results_tracker <- NULL
convergence_tracker <- NULL
iteration_tracker <- NULL

set.seed(123)
for(i in 1:n_sim){
  
  my_data_i <- COMBO_data(sample_size = n,
                          x_mu = x_mu, x_sigma = x_sigma,
                          z_shape = z_shape,
                          beta = true_beta, gamma = true_gamma)
  
  start_param <- rep(0, 6)
  
  for(j in 1:length(lambda_decay)){
    
    current_lambda <- lambda_decay[j]
    optim_i <- optim(start_param, fn = penalized_likelihood,
                     lambda = current_lambda,
                     x = my_data_i$x, z = my_data_i$z,
                     ystar = my_data_i$obs_Y,
                     #method = "BFGS",
                     control = list(fnscale = -1, maxit = 5000))
    
    lambda_tracker <- c(lambda_tracker, rep(current_lambda, 6))
    param_results_tracker <- c(param_results_tracker,
                               optim_i$par)
    convergence_tracker <- c(convergence_tracker,
                             rep(optim_i$convergence, 6))
    iteration_tracker <- c(iteration_tracker, rep(i, 6))
    
    print(paste0("Tested lambda value ", current_lambda,
                 " for simulation ", i, "!"))
    
    start_param <- optim_i$par
    
  }
}

parameter_names <- c("beta_0", "beta_x",
                     "gamma_110", "gamma_11z",
                     "gamma_120", "gamma_12z")

results_df <- data.frame(lambda = lambda_tracker,
                         estimate = param_results_tracker,
                         parameter = rep(parameter_names,
                                         length(lambda_decay) * n_sim),
                         true_value = rep(true_parameters,
                                          length(lambda_decay) * n_sim),
                         convergence = convergence_tracker)

#save(results_df,
#     file = paste0(save_directory, "decay_lambda_s1_2024-06-13.RData"))

load(paste0(save_directory, "decay_lambda_s1_2024-06-13.RData"))

table(results_df$convergence) # 0 means converged.

print(results_df %>%
        group_by(parameter, lambda) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        mutate(lowest_rmse = ifelse(rmse == min(rmse), "*", "")) %>%
        mutate(lambda_with_lowest_rmse = ifelse(lowest_rmse == "*", lambda, "")) %>%
        ungroup(),
      n = 100, width = Inf)

print(results_df %>%
        filter(lambda == 0) %>%
        group_by(parameter) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  median_estimate = median(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        ungroup(),
      n = 100, width = Inf)

ggplot(data = results_df) +
  geom_density(aes(x = estimate, fill = as.factor(lambda)),
               alpha = .8) +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df %>% filter(lambda == 0)) +
  geom_density(aes(x = estimate),
               alpha = .8) +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

################################################################################

# Test out decaying lambda again, but not starting so extreme.

lambda_decay2 <- c(15, 10, 5, 2, 1, .9, .8, .7, .6, .5, .4, .3, .2, .1, 0)
n_sim <- 50

# This is close to simulation setting #1 in the COMBO paper. 
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1

true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_parameters <- c(true_beta, c(true_gamma))

lambda_tracker2 <- NULL
param_results_tracker2 <- NULL
convergence_tracker2 <- NULL
iteration_tracker2 <- NULL

set.seed(123)
for(i in 1:n_sim){
  
  my_data_i <- COMBO_data(sample_size = n,
                          x_mu = x_mu, x_sigma = x_sigma,
                          z_shape = z_shape,
                          beta = true_beta, gamma = true_gamma)
  
  start_param <- rep(0, 6)
  
  for(j in 1:length(lambda_decay2)){
    
    current_lambda <- lambda_decay2[j]
    optim_i <- optim(start_param, fn = penalized_likelihood,
                     lambda = current_lambda,
                     x = my_data_i$x, z = my_data_i$z,
                     ystar = my_data_i$obs_Y,
                     #method = "BFGS",
                     control = list(fnscale = -1, maxit = 5000))
    
    lambda_tracker2 <- c(lambda_tracker2, rep(current_lambda, 6))
    param_results_tracker2 <- c(param_results_tracker2,
                               optim_i$par)
    convergence_tracker2 <- c(convergence_tracker2,
                             rep(optim_i$convergence, 6))
    iteration_tracker2 <- c(iteration_tracker2, rep(i, 6))
    
    print(paste0("Tested lambda value ", current_lambda,
                 " for simulation ", i, "!"))
    
    start_param <- optim_i$par
    
  }
}

parameter_names <- c("beta_0", "beta_x",
                     "gamma_110", "gamma_11z",
                     "gamma_120", "gamma_12z")

results_df2 <- data.frame(lambda = lambda_tracker2,
                          estimate = param_results_tracker2,
                          parameter = rep(parameter_names,
                                          length(lambda_decay2) * n_sim),
                          true_value = rep(true_parameters,
                                           length(lambda_decay2) * n_sim),
                          convergence = convergence_tracker2)

#save(results_df2,
#     file = paste0(save_directory, "decay_lambda_s2_2024-06-13.RData"))

load(paste0(save_directory, "decay_lambda_s2_2024-06-13.RData"))

table(results_df2$convergence) # 0 means converged.

print(results_df2 %>%
        group_by(parameter, lambda) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        mutate(lowest_rmse = ifelse(rmse == min(rmse), "*", "")) %>%
        mutate(lambda_with_lowest_rmse = ifelse(lowest_rmse == "*", lambda, "")) %>%
        ungroup(),
      n = 100, width = Inf)

print(results_df2 %>%
        filter(lambda == 0) %>%
        group_by(parameter) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  median_estimate = median(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        ungroup(),
      n = 100, width = Inf)

print(results_df2 %>%
        filter(lambda == 0) %>%
        filter(estimate < 30) %>%
        group_by(parameter) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  median_estimate = median(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        ungroup(),
      n = 100, width = Inf)

ggplot(data = results_df2) +
  geom_density(aes(x = estimate, fill = as.factor(lambda)),
               alpha = .8) +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df2 %>% filter(lambda == 0)) +
  geom_histogram(aes(x = estimate),
                 bins = 30, fill = "lavender", color = "black") +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df2 %>% filter(lambda == 0) %>%
         filter(estimate < 30)) +
  geom_histogram(aes(x = estimate),
                 bins = 30, fill = "lavender", color = "black") +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

################################################################################

# Test out decaying lambda again, but not starting so extreme and more gradual steps.

lambda_decay3 <- seq(from = 20, to = 0, by = -0.25)
n_sim <- 50

# This is close to simulation setting #1 in the COMBO paper. 
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1

true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_parameters <- c(true_beta, c(true_gamma))

lambda_tracker3 <- NULL
param_results_tracker3 <- NULL
convergence_tracker3 <- NULL
iteration_tracker3 <- NULL

set.seed(123)
for(i in 1:n_sim){
  
  my_data_i <- COMBO_data(sample_size = n,
                          x_mu = x_mu, x_sigma = x_sigma,
                          z_shape = z_shape,
                          beta = true_beta, gamma = true_gamma)
  
  start_param <- rep(0, 6)
  
  for(j in 1:length(lambda_decay3)){
    
    current_lambda <- lambda_decay3[j]
    optim_i <- optim(start_param, fn = penalized_likelihood,
                     lambda = current_lambda,
                     x = my_data_i$x, z = my_data_i$z,
                     ystar = my_data_i$obs_Y,
                     #method = "BFGS",
                     control = list(fnscale = -1, maxit = 5000))
    
    lambda_tracker3 <- c(lambda_tracker3, rep(current_lambda, 6))
    param_results_tracker3 <- c(param_results_tracker3,
                                optim_i$par)
    convergence_tracker3 <- c(convergence_tracker3,
                              rep(optim_i$convergence, 6))
    iteration_tracker3 <- c(iteration_tracker3, rep(i, 6))
    
    print(paste0("Tested lambda value ", current_lambda,
                 " for simulation ", i, "!"))
    
    start_param <- optim_i$par
    
  }
}

parameter_names <- c("beta_0", "beta_x",
                     "gamma_110", "gamma_11z",
                     "gamma_120", "gamma_12z")

results_df3 <- data.frame(lambda = lambda_tracker3,
                          estimate = param_results_tracker3,
                          parameter = rep(parameter_names,
                                          length(lambda_decay3) * n_sim),
                          true_value = rep(true_parameters,
                                           length(lambda_decay3) * n_sim),
                          convergence = convergence_tracker3,
                          iteration = rep(1:n_sim, each = 6 * length(lambda_decay3)),
                          lambda_iteration = c(rep(rep(1:length(lambda_decay3),
                                                       each = 6),
                                                   n_sim)))

#save(results_df3,
#     file = paste0(save_directory, "decay_lambda_s3_2024-06-13.RData"))

load(paste0(save_directory, "decay_lambda_s3_2024-06-13.RData"))

table(results_df3$convergence) # 0 means converged.

print(results_df3 %>%
        filter(lambda == 0) %>%
        group_by(parameter) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  median_estimate = median(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        ungroup(),
      n = 100, width = Inf)

print(results_df3 %>%
        filter(lambda == 0) %>%
        filter(estimate < 30) %>%
        group_by(parameter) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  median_estimate = median(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        ungroup(),
      n = 100, width = Inf)

ggplot(data = results_df3) +
  geom_density(aes(x = estimate, fill = as.factor(lambda)),
               alpha = .8) +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal() +
  guides(fill="none")

ggplot(data = results_df3 %>% filter(lambda == 0)) +
  geom_histogram(aes(x = estimate),
                 bins = 30, fill = "lavender", color = "black") +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df3 %>% filter(lambda == 0) %>% filter(estimate < 30)) +
  geom_histogram(aes(x = estimate),
                 bins = 30, fill = "lavender", color = "black") +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df3 %>% filter(parameter %in% c("beta_0", "beta_x"))) +
  geom_line(aes(x = lambda_iteration, y = estimate, color = as.factor(iteration))) +
  geom_hline(aes(yintercept = true_value), size = 2) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal() +
  guides(color = "none")

ggplot(data = results_df3 %>%
         filter(parameter %in% c("gamma_110", "gamma_11z", "gamma_120", "gamma_12z"))) +
  geom_line(aes(x = lambda_iteration, y = estimate, color = as.factor(iteration))) +
  geom_hline(aes(yintercept = true_value), size = 2) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal() +
  guides(color = "none")


################################################################################

# Test out decaying lambda again, but not starting so extreme and now decay is sudden.

lambda_decay4 <- c(15, 10, 5, 2, 0)
n_sim <- 50

# This is close to simulation setting #1 in the COMBO paper. 
n <- 1000
x_mu <- 0
x_sigma <- 1
z_shape <- 1

true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_parameters <- c(true_beta, c(true_gamma))

lambda_tracker4 <- NULL
param_results_tracker4 <- NULL
convergence_tracker4 <- NULL
iteration_tracker4 <- NULL

set.seed(123)
for(i in 1:n_sim){
  
  my_data_i <- COMBO_data(sample_size = n,
                          x_mu = x_mu, x_sigma = x_sigma,
                          z_shape = z_shape,
                          beta = true_beta, gamma = true_gamma)
  
  start_param <- rep(0, 6)
  
  for(j in 1:length(lambda_decay4)){
    
    current_lambda <- lambda_decay4[j]
    optim_i <- optim(start_param, fn = penalized_likelihood,
                     lambda = current_lambda,
                     x = my_data_i$x, z = my_data_i$z,
                     ystar = my_data_i$obs_Y,
                     #method = "BFGS",
                     control = list(fnscale = -1, maxit = 5000))
    
    lambda_tracker4 <- c(lambda_tracker4, rep(current_lambda, 6))
    param_results_tracker4 <- c(param_results_tracker4,
                                optim_i$par)
    convergence_tracker4 <- c(convergence_tracker4,
                              rep(optim_i$convergence, 6))
    iteration_tracker4 <- c(iteration_tracker4, rep(i, 6))
    
    print(paste0("Tested lambda value ", current_lambda,
                 " for simulation ", i, "!"))
    
    start_param <- optim_i$par
    
  }
}

parameter_names <- c("beta_0", "beta_x",
                     "gamma_110", "gamma_11z",
                     "gamma_120", "gamma_12z")

results_df4 <- data.frame(lambda = lambda_tracker4,
                          estimate = param_results_tracker4,
                          parameter = rep(parameter_names,
                                          length(lambda_decay4) * n_sim),
                          true_value = rep(true_parameters,
                                           length(lambda_decay4) * n_sim),
                          convergence = convergence_tracker4,
                          iteration = iteration_tracker4,
                          lambda_iteration = c(rep(rep(1:length(lambda_decay4),
                                                       each = 6),
                                                   n_sim)))

#save(results_df4,
#     file = paste0(save_directory, "decay_lambda_s4_2024-06-13.RData"))

load(paste0(save_directory, "decay_lambda_s4_2024-06-13.RData"))

table(results_df4$convergence) # 0 means converged.

print(results_df4 %>%
        group_by(parameter, lambda) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        mutate(lowest_rmse = ifelse(rmse == min(rmse), "*", "")) %>%
        mutate(lambda_with_lowest_rmse = ifelse(lowest_rmse == "*", lambda, "")) %>%
        ungroup(),
      n = 100, width = Inf)

print(results_df4 %>%
        filter(lambda == 0) %>%
        group_by(parameter) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  median_estimate = median(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        ungroup(),
      n = 100, width = Inf)

print(results_df4 %>%
        filter(lambda == 0) %>%
        filter(estimate < 30) %>%
        group_by(parameter) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  median_estimate = median(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        ungroup(),
      n = 100, width = Inf)

ggplot(data = results_df4) +
  geom_density(aes(x = estimate, fill = as.factor(lambda)),
               alpha = .8) +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df4 %>% filter(lambda == 0)) +
  geom_histogram(aes(x = estimate),
                 bins = 30, fill = "lavender", color = "black") +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df4 %>% filter(lambda == 0) %>%
         filter(estimate < 30)) +
  geom_histogram(aes(x = estimate),
                 bins = 30, fill = "lavender", color = "black") +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df4) +
  geom_line(aes(x = lambda_iteration, y = estimate, color = as.factor(iteration))) +
  geom_hline(aes(yintercept = true_value), size = 2) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal() +
  guides(color = "none")

################################################################################

# Test out decaying lambda again, but not starting so extreme.

lambda_decay5 <- c(15, 10, 5, 2, 1, .9, .8, .7, .6, .5, .4, .3, .2, .1, 0)
n_sim <- 50

# This is close to simulation setting #1 in the COMBO paper. 
n <- 5000
x_mu <- 0
x_sigma <- 1
z_shape <- 2.5

true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
true_parameters <- c(true_beta, c(true_gamma))

lambda_tracker5 <- NULL
param_results_tracker5<- NULL
convergence_tracker5 <- NULL
iteration_tracker5 <- NULL

set.seed(123)
for(i in 1:n_sim){
  
  my_data_i <- COMBO_data(sample_size = n,
                          x_mu = x_mu, x_sigma = x_sigma,
                          z_shape = z_shape,
                          beta = true_beta, gamma = true_gamma)
  
  start_param <- rep(0, 6)
  
  for(j in 1:length(lambda_decay5)){
    
    current_lambda <- lambda_decay5[j]
    optim_i <- optim(start_param, fn = penalized_likelihood,
                     lambda = current_lambda,
                     x = my_data_i$x, z = my_data_i$z,
                     ystar = my_data_i$obs_Y,
                     #method = "BFGS",
                     control = list(fnscale = -1, maxit = 5000))
    
    lambda_tracker5 <- c(lambda_tracker5, rep(current_lambda, 6))
    param_results_tracker5 <- c(param_results_tracker5,
                                optim_i$par)
    convergence_tracker5 <- c(convergence_tracker5,
                              rep(optim_i$convergence, 6))
    iteration_tracker5 <- c(iteration_tracker5, rep(i, 6))
    
    print(paste0("Tested lambda value ", current_lambda,
                 " for simulation ", i, "!"))
    
    start_param <- optim_i$par
    
  }
}

parameter_names <- c("beta_0", "beta_x",
                     "gamma_110", "gamma_11z",
                     "gamma_120", "gamma_12z")

results_df5 <- data.frame(lambda = lambda_tracker5,
                          estimate = param_results_tracker5,
                          parameter = rep(parameter_names,
                                          length(lambda_decay5) * n_sim),
                          true_value = rep(true_parameters,
                                           length(lambda_decay5) * n_sim),
                          convergence = convergence_tracker5)

#save(results_df5,
#     file = paste0(save_directory, "decay_lambda_s5_2024-06-13.RData"))

load(paste0(save_directory, "decay_lambda_s5_2024-06-13.RData"))

table(results_df5$convergence) # 0 means converged.

print(results_df5 %>%
        group_by(parameter, lambda) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        mutate(lowest_rmse = ifelse(rmse == min(rmse), "*", "")) %>%
        mutate(lambda_with_lowest_rmse = ifelse(lowest_rmse == "*", lambda, "")) %>%
        ungroup(),
      n = 100, width = Inf)

print(results_df5 %>%
        filter(lambda == 0) %>%
        group_by(parameter) %>%
        mutate(bias = true_value - estimate) %>%
        summarise(mean_estimate = mean(estimate),
                  median_estimate = median(estimate),
                  sd_estimate = sd(estimate),
                  avg_bias = mean(bias),
                  true_value = mean(true_value)) %>%
        mutate(rmse = avg_bias^2 + sd_estimate^2) %>%
        ungroup(),
      n = 100, width = Inf)

ggplot(data = results_df5) +
  geom_density(aes(x = estimate, fill = as.factor(lambda)),
               alpha = .8) +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()

ggplot(data = results_df5 %>% filter(lambda == 0)) +
  geom_histogram(aes(x = estimate),
                 bins = 30, fill = "lavender", color = "black") +
  geom_vline(aes(xintercept = true_value)) +
  facet_wrap(~parameter, scales = "free") +
  theme_minimal()
