# Testing out a mediation model with a misclassified binary mediator and binary outcome.

function_directory <- "C:/Users/kimho/Dropbox/Misclassification/Code/Mediation/mediation_model_2023-02-23/functions/"
source_files <- list.files(function_directory, pattern = "*.R")
for (i in 1:length(source_files)) {
  source(paste0(function_directory, source_files[i]))
}

save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/misclassified_mediation/cornell_stats_poster/"

library(dplyr)
library(ggplot2)
library(stringr)
library(splines)

set.seed(1)
sample_size <- 10000
n_cat <- 2
x_mu <- 0
x_sigma <- 1
z_shape <- 1
z_scale <- 1
c_shape <- 1

true_beta <- matrix(c(1, -2, .5), ncol = 1)
true_gamma <- matrix(c(3, 2, -2, -2.5), nrow = 2, byrow = FALSE)
true_theta <- matrix(c(1, 1.5, -2, -.2), ncol = 1)

data <- mediation_data_normalY_2(sample_size,
                                 x_mu, x_sigma, z_shape, z_scale, c_shape,
                                 true_beta, true_gamma, true_theta)

table(data[["obs_mediator"]], data[["true_mediator"]])

true_se <- length(which(data[["obs_mediator"]] == 1 & data[["true_mediator"]] == 1)) /
  length(which(data[["true_mediator"]] == 1))
true_sp <- length(which(data[["obs_mediator"]] == 2 & data[["true_mediator"]] == 2)) /
  length(which(data[["true_mediator"]] == 2))
true_obs1 <- length(which(data[["obs_mediator"]] == 1)) / sample_size

true_obs1 < true_se
true_obs1 > (1 - true_sp)

true_se
true_sp

mstar_01 <- ifelse(data[["obs_mediator"]] == 1, 1, 0)
mstar_data <- data.frame(mstar_01, x = data[["x"]],
                         c = data[["c"]], z = data[["z"]],
                         y = data[["outcome"]])
mstar_model <- glm(mstar_01 ~ ns(y, 4) + ns(x, 4) + ns(c, 4) +
                     ns(x*c, 4) + ns(y*c, 4) + ns(z, 4),
                   data = mstar_data, family = "binomial")
mstar_predictions <- predict(mstar_model, newdata = mstar_data, "response")

# Assumption violations
length(which(mstar_predictions >= true_se))
length(which(mstar_predictions <= 1 - true_sp))

# Make very tight distributions for misclassification terms
true_pistar <- pistar_compute(true_gamma, matrix(c(rep(1, sample_size),
                                                   data[["z"]]),
                                                 nrow = sample_size,
                                                 byrow = FALSE),
                              sample_size, 2)
hist(true_pistar[(sample_size + 1):(2 * sample_size), 1])
summary(true_pistar[(sample_size + 1):(2 * sample_size), 1])
hist(true_pistar[1:sample_size, 2])
summary(true_pistar[1:sample_size, 2])

mediator_01 <- ifelse(data[["true_mediator"]] == 1, 1, 0)
mediator_model <- glm(mediator_01 ~ data[["x"]] + data[["c"]],
                      family = "binomial")
summary(mediator_model)

interaction_term <- mediator_01 * data[["x"]]
outcome_model <- lm(data[["outcome"]] ~ data[["x"]] + mediator_01 + data[["c"]])
summary(outcome_model)

obs_mediator_01 <- ifelse(data[["obs_mediator"]] == 1, 1, 0)
obs_mediator_model <- glm(obs_mediator_01 ~ data[["x"]] + data[["c"]],
                          family = "binomial")
summary(obs_mediator_model)

obs_interaction_term <- obs_mediator_01 * data[["x"]]
obs_outcome_model <- lm(data[["outcome"]] ~ data[["x"]] + obs_mediator_01 +
                         obs_mediator_01 * data[["x"]] + data[["c"]])
summary(obs_outcome_model)


start_beta <- matrix(rep(1, 3), ncol = 1)
start_gamma <- matrix(rep(1, 4), nrow = 2, ncol = 2)
mediation_model_predictors <- matrix(c(data[["x"]], data[["c"]]), ncol = 2,
                                     byrow = FALSE)
mediation_results <- COMBO_EM(data[["obs_mediator"]], mediation_model_predictors, 
                              data[["z"]], start_beta, start_gamma)
mediation_results

predicted_beta <- matrix(mediation_results$Estimates[1:3], ncol = 1)
predicted_gamma <- matrix(mediation_results$Estimates[4:7], 
                          ncol = 2, byrow = FALSE)

mstar_matrix <- matrix(c(ifelse(data[["obs_mediator"]] == 1, 1, 0),
                         ifelse(data[["obs_mediator"]] == 2, 1, 0)),
                       ncol = 2, byrow = FALSE)

X_design <- matrix(c(rep(1, sample_size), data[["x"]], data[["c"]]),
                   ncol = 3, byrow = FALSE)

pi_matrix <- pi_compute(predicted_beta, X_design, sample_size, n_cat)

Z_design <- matrix(c(rep(1, sample_size), data[["z"]]),
                   ncol = 2, byrow = FALSE)

pistar_matrix <- pistar_compute(predicted_gamma, Z_design, sample_size, n_cat)

sensitivity <- pistar_matrix[1:sample_size, 1]
specificity <- pistar_matrix[(sample_size + 1):(2 * sample_size), 2]

mstar_model_data <- data.frame(x = data[["x"]], c = data[["c"]], z = data[["z"]],
                               y = data[["outcome"]],
                               mstar = data[["obs_mediator"]])
mstar_model_data$mstar_01 <- ifelse(mstar_model_data$mstar == 1, 1, 0)
#mstar_model_data$y_01 <- ifelse(mstar_model_data$y == 1, 1, 0)

mstar_model <- glm(mstar_01 ~ ns(y, 4) + ns(x, 4) + ns(c, 4) +
                     ns(x*c, 4) + ns(y*c, 4) + ns(z, 4),
                   data = mstar_model_data, family = "binomial")

predictions <- predict(mstar_model, type = "response")

sensitivity[predictions >= sensitivity] <- predictions[predictions >= sensitivity] + 0.001
specificity[predictions <= (1-specificity)] <- 1 - predictions[predictions <= (1 - specificity)] + 0.001

term1 <- (sensitivity - 1) * predictions * (1 / (sensitivity * (predictions - 1)))
term2 <- (specificity - 1) * (predictions - 1) * (1 / (specificity * predictions))
det <- 1/(term1*term2-1)
ppv_calc <- det * (term2 - 1)
npv_calc <- det * (term1 - 1)

ppv <- unname(ppv_calc)
npv <- unname(npv_calc)

actual_dataset <- data.frame(x = data[["x"]], c = data[["c"]], z = data[["z"]],
                             y = data[["outcome"]], m = 0,
                             mstar_01 = mstar_model_data$mstar_01)

duplicate_dataset <- data.frame(x = data[["x"]], c = data[["c"]], z = data[["z"]],
                                y = data[["outcome"]], m = 1,
                                mstar_01 = mstar_model_data$mstar_01)

doubled_data <- rbind(actual_dataset, duplicate_dataset)

doubled_data$w <- 0
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 1] <- ppv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 1) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 1] <- 1 - ppv[doubled_data$m == 0 & doubled_data$mstar_01 == 1]
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 0] <- 1 - npv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 0) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 0] <- npv[doubled_data$m == 0 & doubled_data$mstar_01 == 0]

weighted_outcome_model <- lm(y ~ x + m + c, weights = w,
                              data = doubled_data)
summary(weighted_outcome_model)

################################################################################

set.seed(123)
n_sim <- 100
my_results <- NULL
sim_indicator <- NULL
actual_theta_results <- NULL
for(i in 1:n_sim){
  
  set.seed(1)
  sample_size <- 10000
  n_cat <- 2
  x_mu <- 0
  x_sigma <- 1
  z_shape <- 1
  z_scale <- 1
  c_shape <- 1
  
  true_beta <- matrix(c(1, -2, .5), ncol = 1)
  true_gamma <- matrix(c(3, 2, -2, -2.5), nrow = 2, byrow = FALSE)
  true_theta <- matrix(c(1, 1.5, -2, -.2), ncol = 1)
  
  data <- mediation_data_normalY_2(sample_size,
                                   x_mu, x_sigma, z_shape, z_scale, c_shape,
                                   true_beta, true_gamma, true_theta)
  
  table(data[["obs_mediator"]], data[["true_mediator"]])
  
  true_se <- length(which(data[["obs_mediator"]] == 1 & data[["true_mediator"]] == 1)) /
    length(which(data[["true_mediator"]] == 1))
  true_sp <- length(which(data[["obs_mediator"]] == 2 & data[["true_mediator"]] == 2)) /
    length(which(data[["true_mediator"]] == 2))
  true_obs1 <- length(which(data[["obs_mediator"]] == 1)) / sample_size
  
  true_obs1 < true_se
  true_obs1 > (1 - true_sp)
  
  mstar_01 <- ifelse(data[["obs_mediator"]] == 1, 1, 0)
  mstar_data <- data.frame(mstar_01, x = data[["x"]],
                           c = data[["c"]], z = data[["z"]],
                           y = data[["outcome"]])
  mstar_model <- glm(mstar_01 ~ y + x + c + x*c + y*c + z,
                     data = mstar_data,
                     family = "binomial"(link = logit))
  mstar_predictions <- predict(mstar_model, newdata = mstar_data, "response")
  
  # Assumption violations
  length(which(mstar_predictions >= true_se))
  length(which(mstar_predictions <= 1 - true_sp))
  
  table(data[["obs_mediator"]], data[["true_mediator"]])
  
  mediator_01 <- ifelse(data[["true_mediator"]] == 1, 1, 0)
  mediator_model <- glm(mediator_01 ~ data[["x"]] + data[["c"]],
                        family = "binomial")
  summary(mediator_model)
  
  interaction_term <- mediator_01 * data[["x"]]
  outcome_model <- lm(data[["outcome"]] ~ data[["x"]] + mediator_01 +
                        mediator_01 * data[["x"]] + data[["c"]])
  summary(outcome_model)
  actual_theta_results <- c(actual_theta_results, unname(coef(outcome_model)))
  
  obs_mediator_01 <- ifelse(data[["obs_mediator"]] == 1, 1, 0)
  obs_mediator_model <- glm(obs_mediator_01 ~ data[["x"]] + data[["c"]],
                            family = "binomial")
  summary(obs_mediator_model)
  
  obs_interaction_term <- obs_mediator_01 * data[["x"]]
  obs_outcome_model <- lm(data[["outcome"]] ~ data[["x"]] + obs_mediator_01 +
                            obs_mediator_01 * data[["x"]] + data[["c"]])
  summary(obs_outcome_model)
  
  
  start_beta <- matrix(rep(1, 3), ncol = 1)
  start_gamma <- matrix(rep(1, 4), nrow = 2, ncol = 2)
  mediation_model_predictors <- matrix(c(data[["x"]], data[["c"]]), ncol = 2,
                                       byrow = FALSE)
  mediation_results <- COMBO_EM_new_method_only(data[["obs_mediator"]], mediation_model_predictors, 
                                data[["z"]], start_beta, start_gamma)
  mediation_results
  
  predicted_beta <- matrix(mediation_results$Estimates[1:3], ncol = 1)
  predicted_gamma <- matrix(mediation_results$Estimates[4:7], 
                            ncol = 2, byrow = FALSE)
  
  mstar_matrix <- matrix(c(ifelse(data[["obs_mediator"]] == 1, 1, 0),
                           ifelse(data[["obs_mediator"]] == 2, 1, 0)),
                         ncol = 2, byrow = FALSE)
  
  X_design <- matrix(c(rep(1, sample_size), data[["x"]], data[["c"]]),
                     ncol = 3, byrow = FALSE)
  
  pi_matrix <- pi_compute(predicted_beta, X_design, sample_size, n_cat)
  
  Z_design <- matrix(c(rep(1, sample_size), data[["z"]]),
                     ncol = 2, byrow = FALSE)
  
  pistar_matrix <- pistar_compute(predicted_gamma, Z_design, sample_size, n_cat)
  
  sensitivity <- pistar_matrix[1:sample_size, 1]
  specificity <- pistar_matrix[(sample_size + 1):(2 * sample_size), 2]
  
  mstar_model_data <- data.frame(x = data[["x"]], c = data[["c"]], z = data[["z"]],
                                 y = data[["outcome"]],
                                 mstar = data[["obs_mediator"]])
  mstar_model_data$mstar_01 <- ifelse(mstar_model_data$mstar == 1, 1, 0)
  #mstar_model_data$y_01 <- ifelse(mstar_model_data$y == 1, 1, 0)
  
  mstar_model <- glm(mstar_01 ~ ns(y, 4) + ns(x, 4) + ns(c, 4) +
                       ns(x*c, 4) + ns(y*c, 4) + ns(z, 4),
                     data = mstar_model_data, family = "binomial")
  
  predictions <- predict(mstar_model, type = "response")
  
  sensitivity[predictions >= sensitivity] <- predictions[predictions >= sensitivity] + 0.001
  specificity[predictions <= (1-specificity)] <- 1 - predictions[predictions <= (1 - specificity)] + 0.001
  
  term1 <- (sensitivity - 1) * predictions * (1 / (sensitivity * (predictions - 1)))
  term2 <- (specificity - 1) * (predictions - 1) * (1 / (specificity * predictions))
  det <- 1/(term1*term2-1)
  ppv_calc <- det * (term2 - 1)
  npv_calc <- det * (term1 - 1)
  
  ppv <- unname(ppv_calc)
  npv <- unname(npv_calc)
  
  actual_dataset <- data.frame(x = data[["x"]], c = data[["c"]], z = data[["z"]],
                               y = data[["outcome"]], m = 0,
                               mstar_01 = mstar_model_data$mstar_01)
  
  duplicate_dataset <- data.frame(x = data[["x"]], c = data[["c"]], z = data[["z"]],
                                  y = data[["outcome"]], m = 1,
                                  mstar_01 = mstar_model_data$mstar_01)
  
  doubled_data <- rbind(actual_dataset, duplicate_dataset)
  
  doubled_data$w <- 0
  doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 1] <- ppv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 1) - sample_size]
  doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 1] <- 1 - ppv[doubled_data$m == 0 & doubled_data$mstar_01 == 1]
  doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 0] <- 1 - npv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 0) - sample_size]
  doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 0] <- npv[doubled_data$m == 0 & doubled_data$mstar_01 == 0]
  
  weighted_outcome_model <- lm(y ~ x + c + m, weights = w,
                               data = doubled_data)
  summary(weighted_outcome_model)
  
  results_i <- c(c(predicted_beta), c(predicted_gamma),
                 c(unname(coefficients(weighted_outcome_model)))[c(1:3, 4)])
  
  my_results <- c(my_results, results_i)
  sim_indicator <- c(sim_indicator, rep(i, 11))
  
  print(paste("Done with simulation", i))
}

sim_results <- data.frame(estimate = my_results,
                          sim = rep(1:n_sim, each = 11),
                          parameter = rep(c("beta_0", "beta_x", "beta_c",
                                            "gamma_11", "gamma_21",
                                            "gamma_12", "gamma_22",
                                            "theta_0", "theta_x", "theta_c","theta_m"),
                                          n_sim),
                          true_value = rep(c(c(true_beta), c(true_gamma),
                                             c(true_theta)[c(1,2,4,3)]), n_sim))

summarized_sim_results <- sim_results %>%
  mutate(bias = estimate - true_value) %>%
  group_by(parameter) %>%
  dplyr::summarise(mean_estimate = mean(estimate),
                   rmse_estimate = sqrt(((mean(estimate) - mean(true_value))^2) + (sd(estimate)^2)),
                   bias = mean(bias)) %>%
  ungroup()  %>%
  mutate(true_value = c(1, .5, -2, 3, -2, 2, -2.5, 1, -.2, -2, 1.5))

ggplot(data = sim_results %>% filter(str_detect(parameter, "theta"))) +
  geom_histogram(aes(x = estimate, fill = parameter),
                 color = "grey40", bins = 100) +
  geom_vline(aes(xintercept = as.numeric(true_value))) +
  theme_minimal() +
  #scale_fill_manual(values = c("plum4", "hotpink", "springgreen4", "grey60", "dodgerblue1")) +
  facet_wrap(~parameter)

ggplot(data = sim_results) +
  geom_histogram(aes(x = estimate, fill = parameter),
                 color = "grey40", bins = 100) +
  geom_vline(aes(xintercept = as.numeric(true_value))) +
  theme_minimal() +
  #scale_fill_manual(values = c("plum4", "hotpink", "springgreen4", "grey60", "dodgerblue1")) +
  facet_wrap(~parameter)

save(sim_results, summarized_sim_results, file = paste0(save_directory, "PVWsplines_NormalY_largeN_results_s3.RData"))
