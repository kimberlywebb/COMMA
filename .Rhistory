beta_param_names <- paste0(rep("beta_", ncol(X_design)), 1:ncol(X_design))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
theta_param_names <- c("theta_0",
paste0(rep("theta_x", ncol(x_mat)), 1:ncol(x_mat)),
"theta_m",
paste0(rep("theta_c", ncol(c_mat)), 1:ncol(c_mat)),
"theta_xm")
PVW_results <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
theta_param_names),
Estimates = c(c(predicted_beta),
c(predicted_gamma),
c(unname(coefficients(weighted_outcome_model)))),
Convergence = rep(COMBO_EM_results$Convergence[1],
n_param),
Method = "PVW")
} else if(interaction_indicator == FALSE & outcome_distribution == "Poisson"){
# Duplicate the dataset
actual_dataset <- data.frame(x = x_matrix, m = 0, c = c_matrix,
y = outcome,
mstar_01 = mstar_model_data$mstar_01)
duplicate_dataset <- data.frame(x = x_matrix, m = 1, c = c_matrix,
y = outcome,
mstar_01 = mstar_model_data$mstar_01)
doubled_data <- rbind(actual_dataset, duplicate_dataset)
# Apply NPV and PPV weights
doubled_data$w <- 0
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 1] <- ppv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 1) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 1] <- 1 - ppv[doubled_data$m == 0 & doubled_data$mstar_01 == 1]
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 0] <- 1 - npv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 0) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 0] <- npv[doubled_data$m == 0 & doubled_data$mstar_01 == 0]
# Remove mstar term from dataset before modeling.
doubled_data_2 <- doubled_data[,-(ncol(doubled_data) - 1)]
# Fit weighted logistic regression to estimate theta
weighted_outcome_model <- glm(y ~ . -y -w, weights = w,
data = doubled_data_2,
family = "poisson"(link = "log"))
summary(weighted_outcome_model)
#  Save results
beta_param_names <- paste0(rep("beta_", ncol(X_design)), 1:ncol(X_design))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
theta_param_names <- c("theta_0",
paste0(rep("theta_x", ncol(x_mat)), 1:ncol(x_mat)),
"theta_m",
paste0(rep("theta_c", ncol(c_mat)), 1:ncol(c_mat)))
PVW_results <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
theta_param_names),
Estimates = c(c(predicted_beta),
c(predicted_gamma),
c(unname(coefficients(weighted_outcome_model)))),
Convergence = rep(COMBO_EM_results$Convergence[1],
n_param),
Method = "PVW")
} else if(interaction_indicator == TRUE & outcome_distribution == "Poisson"){
# Duplicate the dataset
interaction_m0 = x_matrix * 0
actual_dataset <- data.frame(x = x_matrix, m = 0, c = c_matrix,
xm = interaction_m0,
y = outcome,
mstar_01 = mstar_model_data$mstar_01)
interaction_m1 = x_matrix * 1
duplicate_dataset <- data.frame(x = x_matrix, m = 1, c = c_matrix,
xm = interaction_m1,
y = outcome,
mstar_01 = mstar_model_data$mstar_01)
doubled_data <- rbind(actual_dataset, duplicate_dataset)
# Apply NPV and PPV weights
doubled_data$w <- 0
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 1] <- ppv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 1) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 1] <- 1 - ppv[doubled_data$m == 0 & doubled_data$mstar_01 == 1]
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 0] <- 1 - npv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 0) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 0] <- npv[doubled_data$m == 0 & doubled_data$mstar_01 == 0]
# Remove mstar term from dataset before modeling.
doubled_data_2 <- doubled_data[,-(ncol(doubled_data) - 1)]
w <- doubled_data_2$w
# Fit weighted logistic regression to estimate theta
weighted_outcome_model <- glm(y ~ . -y -w, weights = w,
data = doubled_data_2,
family = "poisson"(link = "log"))
summary(weighted_outcome_model)
#  Save results
beta_param_names <- paste0(rep("beta_", ncol(X_design)), 1:ncol(X_design))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
theta_param_names <- c("theta_0",
paste0(rep("theta_x", ncol(x_mat)), 1:ncol(x_mat)),
"theta_m",
paste0(rep("theta_c", ncol(c_mat)), 1:ncol(c_mat)),
"theta_xm")
PVW_results <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
theta_param_names),
Estimates = c(c(predicted_beta),
c(predicted_gamma),
c(unname(coefficients(weighted_outcome_model)))),
Convergence = rep(COMBO_EM_results$Convergence[1],
n_param),
Method = "PVW")
} else {
"Undefined"
}
return(PVW_results)
}
test_PVW <- COMMA_PVW(Mstar, outcome, "Poisson", FALSE,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start,
max_em_iterations = 10)
#' outcome = example_data[["outcome"]]
#' x_matrix = example_data[["x"]]
#' z_matrix = example_data[["z"]]
#' c_matrix = example_data[["c"]]
#'
#' EM_results <- COMMA_PVW(Mstar, outcome, FALSE,
#'                         x_matrix, z_matrix, c_matrix,
#'                         beta_start, gamma_start, theta_start)
#'}
#'
COMMA_PVW <- function(Mstar, # Observed mediator vector
outcome, # Outcome vector
outcome_distribution,
interaction_indicator,
# Predictor matrices
x_matrix, z_matrix, c_matrix,
# Start values for parameters
beta_start, gamma_start,
theta_start,
# EM settings
tolerance = 1e-7, max_em_iterations = 1500,
em_method = "squarem"){
n_cat = 2 # Number of categories in mediator
sample_size = length(Mstar) # Sample size
# Create design matrices
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
x_mat <- as.matrix(x_matrix)
c_mat <- as.matrix(c_matrix)
# Create matrix of true mediation model predictors
mediation_model_predictors <- cbind(x_matrix, c_matrix)
# Run the COMBO EM algorithm for the true and observed mediation model
COMBO_EM_results <- COMBO_EM_algorithm(Mstar,
mediation_model_predictors,
z_matrix,
beta_start, gamma_start,
tolerance, max_em_iterations,
em_method)
# Save results
gamma_index_1 = ncol(mediation_model_predictors) + 2
gamma_index_2 = gamma_index_1 + (ncol(Z) * 2) - 1
n_param <- length(c(beta_start, c(gamma_start), theta_start))
predicted_beta <- matrix(COMBO_EM_results$Estimates[1:(ncol(mediation_model_predictors) + 1)],
ncol = 1)
predicted_gamma <- matrix(COMBO_EM_results$Estimates[gamma_index_1:gamma_index_2],
ncol = 2, byrow = FALSE)
# Create a matrix of observed mediator variables using dummy coding
mstar_matrix <- matrix(c(ifelse(Mstar == 1, 1, 0),
ifelse(Mstar == 2, 1, 0)),
ncol = 2, byrow = FALSE)
# Create matrix of predictors for the true mediator
X_design <- cbind(rep(1, sample_size), mediation_model_predictors)
# Generate probabilities for the true mediator value based on EM results
pi_matrix <- pi_compute(predicted_beta, X_design, sample_size, n_cat)
# Create matrix of predictors for the observed mediator
Z_design <- matrix(c(rep(1, sample_size), z_matrix),
ncol = 2, byrow = FALSE)
# Generate probabilities for observed mediator conditional on true mediator
## Based on EM results
pistar_matrix <- pistar_compute(predicted_gamma, Z_design, sample_size, n_cat)
# Estimate sensitivity and specificity
sensitivity <- pistar_matrix[1:sample_size, 1]
specificity <- pistar_matrix[(sample_size + 1):(2 * sample_size), 2]
# Organize data for model predicting the observed mediator
mstar_model_data <- data.frame(x = x_matrix, c = c_matrix, z = z_matrix,
y = outcome,
mstar_01 = ifelse(Mstar == 1, 1, 0))
# Fit spline model for observed mediator based on x, c, y, z
mstar_model <- glm(mstar_01 ~ . ^2,
data = mstar_model_data, family = "binomial")
# Predict observed mediators
predictions <- stats::predict(mstar_model, type = "response")
# Ensure no exact 0 or 1 values
sensitivity[predictions >= sensitivity] <- predictions[predictions >= sensitivity] + 0.001
specificity[predictions <= (1-specificity)] <- 1 - predictions[predictions <= (1 - specificity)] + 0.001
# Compute NPV and PPV
term1 <- (sensitivity - 1) * predictions * (1 / (sensitivity * (predictions - 1)))
term2 <- (specificity - 1) * (predictions - 1) * (1 / (specificity * predictions))
det <- 1/(term1*term2-1)
ppv_calc <- det * (term2 - 1)
npv_calc <- det * (term1 - 1)
ppv <- unname(ppv_calc)
npv <- unname(npv_calc)
if(interaction_indicator == FALSE & outcome_distribution == "Bernoulli"){
# Duplicate the dataset
actual_dataset <- data.frame(x = x_matrix, m = 0, c = c_matrix,
y_01 = ifelse(outcome == 1, 1, 0),
mstar_01 = mstar_model_data$mstar_01)
duplicate_dataset <- data.frame(x = x_matrix, m = 1, c = c_matrix,
y_01 = ifelse(outcome == 1, 1, 0),
mstar_01 = mstar_model_data$mstar_01)
doubled_data <- rbind(actual_dataset, duplicate_dataset)
# Apply NPV and PPV weights
doubled_data$w <- 0
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 1] <- ppv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 1) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 1] <- 1 - ppv[doubled_data$m == 0 & doubled_data$mstar_01 == 1]
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 0] <- 1 - npv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 0) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 0] <- npv[doubled_data$m == 0 & doubled_data$mstar_01 == 0]
# Remove mstar term from dataset before modeling.
doubled_data_2 <- doubled_data[,-(ncol(doubled_data) - 1)]
# Fit weighted logistic regression to estimate theta
weighted_outcome_model <- glm(y_01 ~ . -y_01 -w, weights = w,
data = doubled_data_2,
family = "binomial"(link = "logit"))
summary(weighted_outcome_model)
#  Save results
beta_param_names <- paste0(rep("beta_", ncol(X_design)), 1:ncol(X_design))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
theta_param_names <- c("theta_0",
paste0(rep("theta_x", ncol(x_mat)), 1:ncol(x_mat)),
"theta_m",
paste0(rep("theta_c", ncol(c_mat)), 1:ncol(c_mat)))
PVW_results <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
theta_param_names),
Estimates = c(c(predicted_beta),
c(predicted_gamma),
c(unname(coefficients(weighted_outcome_model)))),
Convergence = rep(COMBO_EM_results$Convergence[1],
n_param),
Method = "PVW")
} else if(interaction_indicator == TRUE & outcome_distribution == "Bernoulli"){
# Duplicate the dataset
interaction_m0 = x_matrix * 0
actual_dataset <- data.frame(x = x_matrix, m = 0, c = c_matrix,
xm = interaction_m0,
y_01 = ifelse(outcome == 1, 1, 0),
mstar_01 = mstar_model_data$mstar_01)
interaction_m1 = x_matrix * 1
duplicate_dataset <- data.frame(x = x_matrix, m = 1, c = c_matrix,
xm = interaction_m1,
y_01 = ifelse(outcome == 1, 1, 0),
mstar_01 = mstar_model_data$mstar_01)
doubled_data <- rbind(actual_dataset, duplicate_dataset)
# Apply NPV and PPV weights
doubled_data$w <- 0
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 1] <- ppv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 1) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 1] <- 1 - ppv[doubled_data$m == 0 & doubled_data$mstar_01 == 1]
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 0] <- 1 - npv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 0) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 0] <- npv[doubled_data$m == 0 & doubled_data$mstar_01 == 0]
# Remove mstar term from dataset before modeling.
doubled_data_2 <- doubled_data[,-(ncol(doubled_data) - 1)]
w <- doubled_data_2$w
# Fit weighted logistic regression to estimate theta
weighted_outcome_model <- glm(y_01 ~ . -y_01 -w, weights = w,
data = doubled_data_2,
family = "binomial"(link = "logit"))
summary(weighted_outcome_model)
#  Save results
beta_param_names <- paste0(rep("beta_", ncol(X_design)), 1:ncol(X_design))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
theta_param_names <- c("theta_0",
paste0(rep("theta_x", ncol(x_mat)), 1:ncol(x_mat)),
"theta_m",
paste0(rep("theta_c", ncol(c_mat)), 1:ncol(c_mat)),
"theta_xm")
PVW_results <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
theta_param_names),
Estimates = c(c(predicted_beta),
c(predicted_gamma),
c(unname(coefficients(weighted_outcome_model)))),
Convergence = rep(COMBO_EM_results$Convergence[1],
n_param),
Method = "PVW")
} else if(interaction_indicator == FALSE & outcome_distribution == "Poisson"){
# Duplicate the dataset
actual_dataset <- data.frame(x = x_matrix, m = 0, c = c_matrix,
y = outcome,
mstar_01 = mstar_model_data$mstar_01)
duplicate_dataset <- data.frame(x = x_matrix, m = 1, c = c_matrix,
y = outcome,
mstar_01 = mstar_model_data$mstar_01)
doubled_data <- rbind(actual_dataset, duplicate_dataset)
# Apply NPV and PPV weights
doubled_data$w <- 0
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 1] <- ppv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 1) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 1] <- 1 - ppv[doubled_data$m == 0 & doubled_data$mstar_01 == 1]
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 0] <- 1 - npv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 0) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 0] <- npv[doubled_data$m == 0 & doubled_data$mstar_01 == 0]
# Remove mstar term from dataset before modeling.
doubled_data_2 <- doubled_data[,-(ncol(doubled_data) - 1)]
# Remove negative weights (why are these happening?)
doubled_data_2$w_no_negative <- ifelse(doubled_data_2$w < 0, 0, doubled_data_2$w)
# Fit weighted logistic regression to estimate theta
weighted_outcome_model <- glm(y ~ . -y -w -w_no_negative, weights = w_no_negative,
data = doubled_data_2,
family = "poisson"(link = "log"))
summary(weighted_outcome_model)
#  Save results
beta_param_names <- paste0(rep("beta_", ncol(X_design)), 1:ncol(X_design))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
theta_param_names <- c("theta_0",
paste0(rep("theta_x", ncol(x_mat)), 1:ncol(x_mat)),
"theta_m",
paste0(rep("theta_c", ncol(c_mat)), 1:ncol(c_mat)))
PVW_results <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
theta_param_names),
Estimates = c(c(predicted_beta),
c(predicted_gamma),
c(unname(coefficients(weighted_outcome_model)))),
Convergence = rep(COMBO_EM_results$Convergence[1],
n_param),
Method = "PVW")
} else if(interaction_indicator == TRUE & outcome_distribution == "Poisson"){
# Duplicate the dataset
interaction_m0 = x_matrix * 0
actual_dataset <- data.frame(x = x_matrix, m = 0, c = c_matrix,
xm = interaction_m0,
y = outcome,
mstar_01 = mstar_model_data$mstar_01)
interaction_m1 = x_matrix * 1
duplicate_dataset <- data.frame(x = x_matrix, m = 1, c = c_matrix,
xm = interaction_m1,
y = outcome,
mstar_01 = mstar_model_data$mstar_01)
doubled_data <- rbind(actual_dataset, duplicate_dataset)
# Apply NPV and PPV weights
doubled_data$w <- 0
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 1] <- ppv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 1) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 1] <- 1 - ppv[doubled_data$m == 0 & doubled_data$mstar_01 == 1]
doubled_data$w[doubled_data$m == 1 & doubled_data$mstar_01 == 0] <- 1 - npv[which(doubled_data$m == 1 & doubled_data$mstar_01 == 0) - sample_size]
doubled_data$w[doubled_data$m == 0 & doubled_data$mstar_01 == 0] <- npv[doubled_data$m == 0 & doubled_data$mstar_01 == 0]
# Remove mstar term from dataset before modeling.
doubled_data_2 <- doubled_data[,-(ncol(doubled_data) - 1)]
w <- doubled_data_2$w
# Remove negative weights (why are these happening?)
doubled_data_2$w_no_negative <- ifelse(doubled_data_2$w < 0, 0, doubled_data_2$w)
# Fit weighted logistic regression to estimate theta
weighted_outcome_model <- glm(y ~ . -y -w -w_no_negative, weights = w_no_negative,
data = doubled_data_2,
family = "poisson"(link = "log"))
summary(weighted_outcome_model)
#  Save results
beta_param_names <- paste0(rep("beta_", ncol(X_design)), 1:ncol(X_design))
gamma_param_names <- paste0(rep("gamma", (n_cat * ncol(Z))),
rep(1:ncol(Z), n_cat),
rep(1:n_cat, each = ncol(Z)))
theta_param_names <- c("theta_0",
paste0(rep("theta_x", ncol(x_mat)), 1:ncol(x_mat)),
"theta_m",
paste0(rep("theta_c", ncol(c_mat)), 1:ncol(c_mat)),
"theta_xm")
PVW_results <- data.frame(Parameter = c(beta_param_names,
gamma_param_names,
theta_param_names),
Estimates = c(c(predicted_beta),
c(predicted_gamma),
c(unname(coefficients(weighted_outcome_model)))),
Convergence = rep(COMBO_EM_results$Convergence[1],
n_param),
Method = "PVW")
} else {
"Undefined"
}
return(PVW_results)
}
test_PVW <- COMMA_PVW(Mstar, outcome, "Poisson", FALSE,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start,
max_em_iterations = 10)
View(test_PVW)
true_beta
true_gamma
true_theta
test_data <- COMMA_data(sample_size, x_mu, x_sigma, z_shape, c_shape,
interaction_indicator = TRUE,
outcome_distribution = "Poisson",
true_beta, true_gamma, true_theta)
# True parameter values (gamma terms set the misclassification rate)
true_beta <- matrix(c(1, -2, .5), ncol = 1)
true_gamma <- matrix(c(1, 1, -.5, -1.5), nrow = 2, byrow = FALSE)
true_theta <- matrix(c(1, 1.5, -2, -.2, -3), ncol = 1)
test_data <- COMMA_data(sample_size, x_mu, x_sigma, z_shape, c_shape,
interaction_indicator = TRUE,
outcome_distribution = "Poisson",
true_beta, true_gamma, true_theta)
start_beta <- matrix(rep(1, 3), ncol = 1)
start_gamma <- matrix(rep(1, 4), nrow = 2, ncol = 2)
start_theta <- matrix(rep(1, 5), ncol = 1)
Mstar = test_data[["obs_mediator"]]
obs_mediator = Mstar
outcome = test_data[["outcome"]]
obs_outcome = outcome
x_matrix = test_data[["x"]]
z_matrix = test_data[["z"]]
c_matrix = test_data[["c"]]
beta_start = start_beta
gamma_start = start_gamma
theta_start = start_theta
tolerance = 1e-7
max_em_iterations = 1500
em_method = "squarem"
param_current <- c(c(beta_start), c(gamma_start), c(theta_start))
n_cat = 2 # Number of categories in mediator
sample_size = length(Mstar) # Sample size
# Create design matrices
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
# Create a matrix of observed mediator variables using dummy coding
obs_M_reps = matrix(rep(Mstar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_M_matrix = 1 * (obs_M_reps == category_matrix)
# EM algorithm settings
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
test_EM <- COMMA_EM(Mstar, outcome, "Poisson", TRUE,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start,
max_em_iterations = 10)
EM_function_poissonY_XM <- function(param_current,
obs_mediator, obs_outcome,
X, Z, c_matrix,
sample_size, n_cat){
beta_current = matrix(param_current[1:3], ncol = 1)
gamma_current = matrix(c(param_current[4:7]),
ncol = n_cat, byrow = FALSE)
theta_current = matrix(c(param_current[8:12]),
ncol = 1)
design_matrix = cbind(X, c_matrix)
probabilities = pi_compute(beta_current, design_matrix, sample_size, n_cat)
conditional_probabilities = pistar_compute(gamma_current, Z, sample_size, n_cat)
model_y_m0 = theta_current[1] + theta_current[2] * X[,2] + theta_current[3] * 0 +
theta_current[4] * c_matrix + theta_current[5] * 0
lambda_y_m0 = exp(model_y_m0)
p_y_m0_term = ((lambda_y_m0 ^ obs_outcome) * exp(-lambda_y_m0)) / (factorial(obs_outcome))
model_y_m1 = theta_current[1] + theta_current[2] * X[,2]  + theta_current[3] * 1 +
theta_current[4] * c_matrix + theta_current[5] * X[,2]
lambda_y_m1 = exp(model_y_m1)
p_y_m1_term = ((lambda_y_m1 ^ obs_outcome) * exp(-lambda_y_m1)) / (factorial(obs_outcome))
mstar_matrix = matrix(c(ifelse(obs_mediator == 1, 1, 0),
ifelse(obs_mediator == 2, 1, 0)),
nrow = sample_size, byrow = FALSE)
outcome_matrix = matrix(c(obs_outcome,
1 - obs_outcome),
nrow = sample_size, byrow = FALSE)
weights = w_m_poissonY(mstar_matrix, outcome_matrix,
pistar_matrix = conditional_probabilities,
pi_matrix = probabilities,
p_y_m0_term, p_y_m1_term,
sample_size, n_cat)
Mstar01 = mstar_matrix[,1]
fit.gamma1 <- suppressWarnings( stats::glm(Mstar01 ~ . + 0, as.data.frame(Z),
weights = weights[,1],
family = "binomial"(link = "logit")) )
gamma1_new <- unname(coefficients(fit.gamma1))
fit.gamma2 <- suppressWarnings( stats::glm(Mstar01 ~ . + 0, as.data.frame(Z),
weights = weights[,2],
family = "binomial"(link = "logit")) )
gamma2_new <- unname(coefficients(fit.gamma2))
fit.beta <- suppressWarnings( stats::glm(weights[,1] ~ . + 0, as.data.frame(design_matrix),
family = stats::binomial()) )
beta_new <- unname(coefficients(fit.beta))
x_vector = X[,2]
data1 = data.frame(x = x_vector, c = c_matrix, m = 0,
w = weights[,2], y = obs_outcome)
data2 = data.frame(x = x_vector, c = c_matrix, m = 1,
w = weights[,1], y = obs_outcome)
doubled_data_theta = rbind(data1, data2)
theta_update = glm(y ~ x + m + c + x*m, weights = w, data = doubled_data_theta,
family = "poisson"(link = "log"))
theta_new <- unname(coef(theta_update))
param_new = c(beta_new, gamma1_new, gamma2_new, theta_new)
param_current = param_new
return(param_new)
}
test_EM <- COMMA_EM(Mstar, outcome, "Poisson", TRUE,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start,
max_em_iterations = 10)
test_EM
test_PVW <- COMMA_PVW(Mstar, outcome, "Poisson", FALSE,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start,
max_em_iterations = 10)
test_PVW <- COMMA_PVW(Mstar, outcome, "Poisson", TRUE,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start,
max_em_iterations = 10)
test_PVW
true_beta
true_gamma
true_theta
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
