sum(X[,2] * weights[,1]) / sum(X[,2]^2))
a_row3 <- c(sum(c_matrix) / sum(c_matrix^2), sum(c_matrix * X[,2]) / sum(c_matrix^2),
1, sum(c_matrix * weights[,1]) / sum(c_matrix^2))
a_row4 <- c(1, sum(X[,2] * weights[,1]) / sum(weights[,1]),
sum(c_matrix * weights[,1]) / sum(weights[,1]), 1)
A = matrix(c(a_row1, a_row2, a_row3, a_row4), byrow = TRUE, nrow = 4)
B = matrix(c(mean(obs_outcome), sum(X[,2] * obs_outcome) / sum(X[,2]^2),
sum(c_matrix * obs_outcome) / sum(c_matrix^2),
sum(weights[,1] * obs_outcome) / sum(weights[,1])),
ncol = 1)
theta_update <- solve(A, B)
# Compute sigma estimate
sigma_update <- (1 / sample_size) * sum(
((obs_outcome - theta_update[1] - theta_update[2] * X[,2]
- theta_update[3] * c_matrix) ^ 2)
- 2 * theta_update[4] * weights[,1] * (obs_outcome - theta_update[1] - theta_update[2] * X[,2]
- theta_update[3] * c_matrix)
+ (theta_update[4] ^ 2 * weights[,1])
)
# Reorder theta estimates
theta_new <- theta_update[c(1,2,4,3)]
sigma_new <- sigma_update
} else {
theta_sigma_new_optim <- optim(par = c(theta_current, sigma_current),
fn = theta_optim_XM,
m = weights[,1],
x = X[,2], c_matrix = c_matrix,
outcome = obs_outcome,
sample_size = sample_size,
n_cat = 2, method = "BFGS")
theta_new <- theta_sigma_new_optim$par[-length(theta_sigma_new_optim$par)]
sigma_new <- theta_sigma_new_optim$par[length(theta_sigma_new_optim$par)]
}
# Save new parameters
param_new = c(beta_new, gamma1_new, gamma2_new, theta_new, sigma_new)
param_new
param_current = param_new
design_matrix = cbind(X, c_matrix)
# Set up parameter indices
gamma_index_1 = ncol(design_matrix) + 1
gamma_index_2 = gamma_index_1 + (ncol(Z) * 2) - 1
n_param <- length(param_current)
# Separate current parameters into beta, gamma, theta, sigma vectors
beta_current = matrix(param_current[1:ncol(design_matrix)], ncol = 1)
gamma_current = matrix(c(param_current[gamma_index_1:gamma_index_2]),
ncol = n_cat, byrow = FALSE)
theta_current = matrix(c(param_current[(gamma_index_2 + 1):(n_param - 1)]),
ncol = 1)
sigma_current = param_current[n_param]
# Compute probability of each latent mediator value
probabilities = COMMA:::pi_compute(beta_current, design_matrix, sample_size, n_cat)
# Compute probability of observed mediator, given latent mediator
conditional_probabilities = COMMA:::pistar_compute(gamma_current, Z, sample_size, n_cat)
# Compute likelihood value of Y based on x, m, c, theta, and sigma
interaction_term_m0 <- X[,-1] * 0
outcome_design_matrix_m0 <- cbind(cbind(X, cbind(rep(0, sample_size), c_matrix)),
interaction_term_m0)
model_y_m0 <- outcome_design_matrix_m0 %*% theta_current
residual_term_m0 = obs_outcome - model_y_m0
term1_m0 = 1 / sqrt(2 * pi * c(sigma_current ^ 2))
exp_term_m0 = exp(-1 * residual_term_m0^2 * (1 / c(2 * sigma_current^2)))
p_yi_m0 = term1_m0 * exp_term_m0
interaction_term_m1 <- X[,-1] * 1
outcome_design_matrix_m1 <- cbind(cbind(X, cbind(rep(1, sample_size), c_matrix)),
interaction_term_m1)
model_y_m1 <- outcome_design_matrix_m1 %*% theta_current
residual_term_m1 = obs_outcome - model_y_m1
term1_m1 = 1 / sqrt(2 * pi * c(sigma_current ^ 2))
exp_term_m1 = exp(-1 * residual_term_m1^2 * (1 / c(2 * sigma_current^2)))
p_yi_m1 = term1_m1 * exp_term_m1
# Create a matrix of observed mediator variables using dummy coding
mstar_matrix = matrix(c(ifelse(obs_mediator == 1, 1, 0),
ifelse(obs_mediator == 2, 1, 0)),
nrow = sample_size, byrow = FALSE)
# Compute E-Step weights
weights = COMMA:::w_m_normalY(mstar_matrix,
pistar_matrix = conditional_probabilities,
pi_matrix = probabilities,
p_yi_m0, p_yi_m1,
sample_size, n_cat)
# Estimate gamma parameters using weighted logistic regression
## Weights from E-Step (split by value of latent mediator, m)
## Outcome is the observed mediator
Mstar01 = mstar_matrix[,1]
fit.gamma1 <- suppressWarnings( stats::glm(Mstar01 ~ . + 0, as.data.frame(Z),
weights = weights[,1],
family = "binomial"(link = "logit")) )
gamma1_new <- unname(coefficients(fit.gamma1))
fit.gamma2 <- suppressWarnings( stats::glm(Mstar01 ~ . + 0, as.data.frame(Z),
weights = weights[,2],
family = "binomial"(link = "logit")) )
gamma2_new <- unname(coefficients(fit.gamma2))
# Estimate beta parameters using logistic regression
## Outcome is the E-Step weight
fit.beta <- suppressWarnings( stats::glm(weights[,1] ~ . + 0, as.data.frame(design_matrix),
family = stats::binomial()) )
beta_new <- unname(coefficients(fit.beta))
if(ncol(matrix(c_matrix, nrow = sample_size, byrow = FALSE)) == 1){
# Solve for theta parameters using a system of equations
a_row1 <- c(1, mean(X[,2]), mean(c_matrix), mean(weights[,1]))
a_row2 <- c(sum(X[,2]) / sum(X[,2]^2), 1, sum(X[,2] * c_matrix) / sum(X[,2]^2),
sum(X[,2] * weights[,1]) / sum(X[,2]^2))
a_row3 <- c(sum(c_matrix) / sum(c_matrix^2), sum(c_matrix * X[,2]) / sum(c_matrix^2),
1, sum(c_matrix * weights[,1]) / sum(c_matrix^2))
a_row4 <- c(1, sum(X[,2] * weights[,1]) / sum(weights[,1]),
sum(c_matrix * weights[,1]) / sum(weights[,1]), 1)
A = matrix(c(a_row1, a_row2, a_row3, a_row4), byrow = TRUE, nrow = 4)
B = matrix(c(mean(obs_outcome), sum(X[,2] * obs_outcome) / sum(X[,2]^2),
sum(c_matrix * obs_outcome) / sum(c_matrix^2),
sum(weights[,1] * obs_outcome) / sum(weights[,1])),
ncol = 1)
theta_update <- solve(A, B)
# Compute sigma estimate
sigma_update <- (1 / sample_size) * sum(
((obs_outcome - theta_update[1] - theta_update[2] * X[,2]
- theta_update[3] * c_matrix) ^ 2)
- 2 * theta_update[4] * weights[,1] * (obs_outcome - theta_update[1] - theta_update[2] * X[,2]
- theta_update[3] * c_matrix)
+ (theta_update[4] ^ 2 * weights[,1])
)
# Reorder theta estimates
theta_new <- theta_update[c(1,2,4,3)]
sigma_new <- sigma_update
} else {
theta_sigma_new_optim <- optim(par = c(theta_current, sigma_current),
fn = theta_optim_XM,
m = weights[,1],
x = X[,2], c_matrix = c_matrix,
outcome = obs_outcome,
sample_size = sample_size,
n_cat = 2, method = "BFGS")
theta_new <- theta_sigma_new_optim$par[-length(theta_sigma_new_optim$par)]
sigma_new <- theta_sigma_new_optim$par[length(theta_sigma_new_optim$par)]
}
# Save new parameters
param_new = c(beta_new, gamma1_new, gamma2_new, theta_new, sigma_new)
param_new
param_current = param_new
design_matrix = cbind(X, c_matrix)
# Set up parameter indices
gamma_index_1 = ncol(design_matrix) + 1
gamma_index_2 = gamma_index_1 + (ncol(Z) * 2) - 1
n_param <- length(param_current)
# Separate current parameters into beta, gamma, theta, sigma vectors
beta_current = matrix(param_current[1:ncol(design_matrix)], ncol = 1)
gamma_current = matrix(c(param_current[gamma_index_1:gamma_index_2]),
ncol = n_cat, byrow = FALSE)
theta_current = matrix(c(param_current[(gamma_index_2 + 1):(n_param - 1)]),
ncol = 1)
sigma_current = param_current[n_param]
# Compute probability of each latent mediator value
probabilities = COMMA:::pi_compute(beta_current, design_matrix, sample_size, n_cat)
# Compute probability of observed mediator, given latent mediator
conditional_probabilities = COMMA:::pistar_compute(gamma_current, Z, sample_size, n_cat)
# Compute likelihood value of Y based on x, m, c, theta, and sigma
interaction_term_m0 <- X[,-1] * 0
outcome_design_matrix_m0 <- cbind(cbind(X, cbind(rep(0, sample_size), c_matrix)),
interaction_term_m0)
model_y_m0 <- outcome_design_matrix_m0 %*% theta_current
residual_term_m0 = obs_outcome - model_y_m0
term1_m0 = 1 / sqrt(2 * pi * c(sigma_current ^ 2))
exp_term_m0 = exp(-1 * residual_term_m0^2 * (1 / c(2 * sigma_current^2)))
p_yi_m0 = term1_m0 * exp_term_m0
interaction_term_m1 <- X[,-1] * 1
outcome_design_matrix_m1 <- cbind(cbind(X, cbind(rep(1, sample_size), c_matrix)),
interaction_term_m1)
model_y_m1 <- outcome_design_matrix_m1 %*% theta_current
residual_term_m1 = obs_outcome - model_y_m1
term1_m1 = 1 / sqrt(2 * pi * c(sigma_current ^ 2))
exp_term_m1 = exp(-1 * residual_term_m1^2 * (1 / c(2 * sigma_current^2)))
p_yi_m1 = term1_m1 * exp_term_m1
# Create a matrix of observed mediator variables using dummy coding
mstar_matrix = matrix(c(ifelse(obs_mediator == 1, 1, 0),
ifelse(obs_mediator == 2, 1, 0)),
nrow = sample_size, byrow = FALSE)
# Compute E-Step weights
weights = COMMA:::w_m_normalY(mstar_matrix,
pistar_matrix = conditional_probabilities,
pi_matrix = probabilities,
p_yi_m0, p_yi_m1,
sample_size, n_cat)
# Estimate gamma parameters using weighted logistic regression
## Weights from E-Step (split by value of latent mediator, m)
## Outcome is the observed mediator
Mstar01 = mstar_matrix[,1]
fit.gamma1 <- suppressWarnings( stats::glm(Mstar01 ~ . + 0, as.data.frame(Z),
weights = weights[,1],
family = "binomial"(link = "logit")) )
gamma1_new <- unname(coefficients(fit.gamma1))
fit.gamma2 <- suppressWarnings( stats::glm(Mstar01 ~ . + 0, as.data.frame(Z),
weights = weights[,2],
family = "binomial"(link = "logit")) )
gamma2_new <- unname(coefficients(fit.gamma2))
# Estimate beta parameters using logistic regression
## Outcome is the E-Step weight
fit.beta <- suppressWarnings( stats::glm(weights[,1] ~ . + 0, as.data.frame(design_matrix),
family = stats::binomial()) )
beta_new <- unname(coefficients(fit.beta))
if(ncol(matrix(c_matrix, nrow = sample_size, byrow = FALSE)) == 1){
# Solve for theta parameters using a system of equations
a_row1 <- c(1, mean(X[,2]), mean(c_matrix), mean(weights[,1]))
a_row2 <- c(sum(X[,2]) / sum(X[,2]^2), 1, sum(X[,2] * c_matrix) / sum(X[,2]^2),
sum(X[,2] * weights[,1]) / sum(X[,2]^2))
a_row3 <- c(sum(c_matrix) / sum(c_matrix^2), sum(c_matrix * X[,2]) / sum(c_matrix^2),
1, sum(c_matrix * weights[,1]) / sum(c_matrix^2))
a_row4 <- c(1, sum(X[,2] * weights[,1]) / sum(weights[,1]),
sum(c_matrix * weights[,1]) / sum(weights[,1]), 1)
A = matrix(c(a_row1, a_row2, a_row3, a_row4), byrow = TRUE, nrow = 4)
B = matrix(c(mean(obs_outcome), sum(X[,2] * obs_outcome) / sum(X[,2]^2),
sum(c_matrix * obs_outcome) / sum(c_matrix^2),
sum(weights[,1] * obs_outcome) / sum(weights[,1])),
ncol = 1)
theta_update <- solve(A, B)
# Compute sigma estimate
sigma_update <- (1 / sample_size) * sum(
((obs_outcome - theta_update[1] - theta_update[2] * X[,2]
- theta_update[3] * c_matrix) ^ 2)
- 2 * theta_update[4] * weights[,1] * (obs_outcome - theta_update[1] - theta_update[2] * X[,2]
- theta_update[3] * c_matrix)
+ (theta_update[4] ^ 2 * weights[,1])
)
# Reorder theta estimates
theta_new <- theta_update[c(1,2,4,3)]
sigma_new <- sigma_update
} else {
theta_sigma_new_optim <- optim(par = c(theta_current, sigma_current),
fn = theta_optim_XM,
m = weights[,1],
x = X[,2], c_matrix = c_matrix,
outcome = obs_outcome,
sample_size = sample_size,
n_cat = 2, method = "BFGS")
theta_new <- theta_sigma_new_optim$par[-length(theta_sigma_new_optim$par)]
sigma_new <- theta_sigma_new_optim$par[length(theta_sigma_new_optim$par)]
}
# Save new parameters
param_new = c(beta_new, gamma1_new, gamma2_new, theta_new, sigma_new)
param_new
param_current = param_new
true_beta
true_gamma
true_theta
devtools::document()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE, error = FALSE, message = FALSE,
fig.align = "center")
library(ggplot2)
library(kableExtra)
library(devtools)
#install_github("kimberlywebb/COMMA")
library(COMMA)
library(dplyr)
set.seed(20240422)
sample_size <- 10000
n_cat <- 2 # Number of categories in the binary mediator
# Data generation settings
x_mu <- 0
x_sigma <- 1
z_shape <- 1
z_scale <- 1
c_shape <- 1
# True parameter values (gamma terms set the misclassification rate)
true_beta <- matrix(c(1, -2, .5), ncol = 1)
true_gamma <- matrix(c(1.8, 1, -1.5, -1), nrow = 2, byrow = FALSE)
true_theta <- matrix(c(1, 1.5, -2.5, -.2), ncol = 1)
# Generate data.
my_data <- COMMA_data(sample_size, x_mu, x_sigma, z_shape, c_shape,
interaction_indicator = FALSE,
outcome_distribution = "Normal",
true_beta, true_gamma, true_theta)
# Save list elements as vectors.
Mstar = my_data[["obs_mediator"]]
Mstar_01 <- ifelse(Mstar == 1, 1, 0)
outcome = my_data[["outcome"]]
x_matrix = my_data[["x"]]
z_matrix = my_data[["z"]]
c_matrix = my_data[["c"]]
# Supply starting values for all parameters.
beta_start <- coef(glm(Mstar_01 ~ x_matrix + c_matrix,
family = "binomial"(link = "logit")))
gamma_start <- matrix(rep(1,4), ncol = 2, nrow = 2, byrow = FALSE)
theta_start <- coef(lm(outcome ~ x_matrix + Mstar_01 + c_matrix))
# Estimate parameters using the EM-Algorithm.
EM_results <- COMMA_EM(Mstar, outcome, outcome_distribution = "Normal",
interaction_indicator = FALSE,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start, sigma_start = 1)
EM_results$True_Value <- c(true_beta, c(true_gamma), true_theta, 1)
EM_results$Estimates <- round(EM_results$Estimates, 3)
EM_results
# Estimate parameters using the OLS correction.
OLS_results <- COMMA_OLS(Mstar, outcome,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start)
library(COMMA)
detach("package:COMMA", unload = TRUE)
devtools::install_github("kimberlywebb/COMMA")
devtools::install_github("kimberlywebb/COMMA")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE, error = FALSE, message = FALSE,
fig.align = "center")
library(ggplot2)
library(kableExtra)
library(devtools)
#install_github("kimberlywebb/COMMA")
library(COMMA)
library(dplyr)
set.seed(20240422)
sample_size <- 10000
n_cat <- 2 # Number of categories in the binary mediator
# Data generation settings
x_mu <- 0
x_sigma <- 1
z_shape <- 1
z_scale <- 1
c_shape <- 1
# True parameter values (gamma terms set the misclassification rate)
true_beta <- matrix(c(1, -2, .5), ncol = 1)
true_gamma <- matrix(c(1.8, 1, -1.5, -1), nrow = 2, byrow = FALSE)
true_theta <- matrix(c(1, 1.5, -2.5, -.2), ncol = 1)
# Generate data.
my_data <- COMMA_data(sample_size, x_mu, x_sigma, z_shape, c_shape,
interaction_indicator = FALSE,
outcome_distribution = "Normal",
true_beta, true_gamma, true_theta)
# Save list elements as vectors.
Mstar = my_data[["obs_mediator"]]
Mstar_01 <- ifelse(Mstar == 1, 1, 0)
outcome = my_data[["outcome"]]
x_matrix = my_data[["x"]]
z_matrix = my_data[["z"]]
c_matrix = my_data[["c"]]
# Supply starting values for all parameters.
beta_start <- coef(glm(Mstar_01 ~ x_matrix + c_matrix,
family = "binomial"(link = "logit")))
gamma_start <- matrix(rep(1,4), ncol = 2, nrow = 2, byrow = FALSE)
theta_start <- coef(lm(outcome ~ x_matrix + Mstar_01 + c_matrix))
# Estimate parameters using the EM-Algorithm.
EM_results <- COMMA_EM(Mstar, outcome, outcome_distribution = "Normal",
interaction_indicator = FALSE,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start, sigma_start = 1)
EM_results$True_Value <- c(true_beta, c(true_gamma), true_theta, 1)
EM_results$Estimates <- round(EM_results$Estimates, 3)
EM_results
# Estimate parameters using the OLS correction.
OLS_results <- COMMA_OLS(Mstar, outcome,
x_matrix, z_matrix, c_matrix,
beta_start, gamma_start, theta_start)
detach("package:COMMA", unload = TRUE)
devtools::install_github("kimberlywebb/COMMA")
devtools::document()
devtools::install_github("kimberlywebb/COMMA")
library(COMMA)
detach("package:COMMA", unload = TRUE)
devtools::install_github("kimberlywebb/COMMA")
devtools::install_github("kimberlywebb/COMMA")
devtools::document()
devtools::install_github("kimberlywebb/COMMA")
library(COMMA)
detach("package:COMMA", unload = TRUE)
devtools::install_github("kimberlywebb/COMMA")
devtools::check()
save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/large_n_v2/"
load(paste0(save_directory, "large_n_sim_results.RData"))
save_directory <- "C:/Users/kimho/Dropbox/Misclassification/Writing/enar_2023/simulation_studies/large_n_MCMCredo2/"
load(paste0(save_directory, "large_n_MCMCredo_sim_results.RData"))
results_df <- do.call("rbind", large_n_sim_results)
true_beta <- matrix(c(1, -2), ncol = 1)
true_gamma <- matrix(c(.5, 1, -.5, -1), nrow = 2, byrow = FALSE)
MCMC_df <- results_df %>%
filter(Method == "MCMC") %>%
filter(Stat %in% c("Posterior Mean", "Posterior Median")) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1))
# Note label switching in naive case! (Multiply results by -1)
MCMC_results <- MCMC_df %>%
group_by(Parameter, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
library(ggplot2)
library(dplyr)
library(tidyr)
library(MASS)
library(Matrix)
library(rjags)
library(turboEM)
library(SAMBA)
MCMC_df <- results_df %>%
filter(Method == "MCMC") %>%
filter(Stat %in% c("Posterior Mean", "Posterior Median")) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1))
# Note label switching in naive case! (Multiply results by -1)
MCMC_results <- MCMC_df %>%
group_by(Parameter, Stat) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_data <- MCMC_df %>%
mutate(Method = ifelse(Parameter %in% c("naive_beta[1,1]", "naive_beta[1,2]"),
"Naive Analysis", Method)) %>%
mutate(Parameter = ifelse(Parameter == "naive_beta[1,1]", "beta[1,1]",
ifelse(Parameter == "naive_beta[1,2]", "beta[1,2]",
as.character(Parameter)))) %>%
mutate(Estimates = ifelse(Method == "Naive Analysis",
Estimates * -1, Estimates)) %>%
mutate(True_Value = case_when(Parameter == "beta[1,1]" ~ 1,
Parameter == "beta[1,2]" ~ -2,
Parameter == "gamma[1,1,1]" ~ .5,
Parameter == "gamma[1,1,2]" ~ 1,
Parameter == "gamma[1,2,1]" ~ -.5,
Parameter == "gamma[1,2,2]" ~ -1)) %>%
group_by(Parameter, Method, Stat) %>%
mutate(Mean_Estimate = mean(Estimates, na.rm = TRUE),
Median_Estimate = median(Estimates, na.rm = TRUE)) %>%
ungroup()
MCMC_graph_subtitle <- "Solid lines represent true parameter values. \nDashed lines represent the mean parameter estimate for a given method. \nDotted lines represent the median parameter estimate for a given method."
ggplot(data = MCMC_graph_data %>% filter(Stat == "Posterior Mean")) +
geom_histogram(aes(x = Estimates, fill = Method), bins = 100) +
geom_vline(aes(xintercept = True_Value)) +
geom_vline(aes(xintercept = Mean_Estimate, color = Method),
linetype = "dashed") +
geom_vline(aes(xintercept = Median_Estimate, color = Method),
linetype = "dotted") +
facet_wrap(~Parameter, scales = "free", ncol = 2) +
theme_minimal() +
scale_fill_brewer(palette = "Pastel1") +
scale_color_brewer(palette = "Pastel1") +
ggtitle("MCMC Parameter Estimates for Binary Outcome Misclassification Model",
subtitle = MCMC_graph_subtitle) +
labs(y = "Frequency")
MCMC_results
graph_data <- MCMC_graph_data %>%
filter(Method == "MCMC") %>%
filter(Stat == "Posterior Mean") %>%
dplyr::select(-c(Median_Estimate)) %>%
#rbind(EM_graph_data) %>%
mutate(Greek_Parameter = factor(Parameter, labels = c("beta_0",
"beta_X",
"gamma_110",
"gamma_11Z",
"gamma_120",
"gamma_12Z")))
all_results <- graph_data %>%
group_by(Method, Parameter, True_Value) %>%
summarise(Mean = mean(Estimates, na.rm = TRUE),
Median = median(Estimates, na.rm = TRUE),
SD = sd(Estimates, na.rm = TRUE)) %>%
ungroup() %>%
mutate(Bias = Mean - True_Value) %>%
mutate(rMSE = sqrt(Bias^2 + SD^2))
all_results
devtools::document()
pkgdown::build_site()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
pkgdown::build_site()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check_rhub(env_vars=c(R_COMPILE_AND_INSTALL_PACKAGES = "always"))
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?cov
?cov
devtools::check()
?median
?lm
?optim
?coef
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
pkgdown::build_site()
pkgdown::build_site()
