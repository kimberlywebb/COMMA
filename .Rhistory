specificity <- pistar_matrix[(sample_size + 1):(2 * sample_size), 2]
# OLS ########################################################################
# Compute the observed mediator prevalence
prevalence <- length(which(test_data[["obs_mediator"]] == 1)) / sample_size
# Compute average misclassification rates
pistar12 <- pistar_matrix[1:sample_size, 2]
pistar21 <- pistar_matrix[(sample_size + 1):(2 * sample_size), 1]
# Compute correction parameters from Nguimkeu, Rosenman, and Tennekoon (2021)
theta_Nguimkeu <- (pistar12 + pistar21) / (1 - pistar12 - pistar21)
squiggle_Nguimkeu <- 1 - (((prevalence - pistar12)*(1 - pistar21 - prevalence)) /
((1 - pistar12 - pistar21)*(1 - prevalence)*prevalence))
# Compute covariances for the correction
interaction_term <- ifelse(test_data[["obs_mediator"]] == 1, 1, 0) * test_data[["x"]]
mstar_01 <- ifelse(test_data[["obs_mediator"]] == 1, 1, 0)
m_matrix <- matrix(c(ifelse(test_data[["obs_mediator"]] == 1, 1, 0),
interaction_term), ncol = 2, byrow = FALSE)
#sd_dd <- cov(m_matrix)
predictor_matrix <- matrix(c(test_data[["x"]], test_data[["c"]]), ncol = 2, byrow = FALSE)
#sd_xx <- cov(predictor_matrix)
sd_m_xm <- (1 / sample_size)*sum((ifelse(test_data[["obs_mediator"]] == 1, 1, 0) - mean(ifelse(test_data[["obs_mediator"]] == 1, 1, 0))) *
(interaction_term - mean(interaction_term)))
cov_m_xm <- cov(m_matrix)
cov_x_c <- cov(predictor_matrix)
cov_x_m <- cov(test_data[["x"]], mstar_01)
cov_m_x <- cov(mstar_01, test_data[["x"]])
cov_x_xm <- cov(test_data[["x"]], interaction_term)
cov_c_m <- cov(test_data[["c"]], mstar_01)
cov_c_xm <- cov(test_data[["c"]], interaction_term)
#sd_xd <- cov(predictor_matrix[,1], predictor_matrix[,2], m_matrix[,1], m_matrix[,2])
sd_dx <- cov(m_matrix, predictor_matrix)
y_matrix <- matrix(test_data[["outcome"]], ncol = 1)
sd_yd <- cov(y_matrix, m_matrix)
sd_yx <- cov(y_matrix, predictor_matrix)
row1 <- c((1 - median(squiggle_Nguimkeu)) * cov_m_xm[1,1],
cov_m_xm[1,2], cov_x_m, cov_c_m)
row2 <- c( (1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,1],
cov_m_xm[2,2], cov_x_xm, cov_c_xm)
block1_dd <- (1 - median(squiggle_Nguimkeu)) * sd_dd
block1_xd <- (1 + median(theta_Nguimkeu)) * sd_xd
block_1_matrix <- matrix(c(block1_dd[,1], block1_xd[,1],
block1_dd[,2], block1_xd[,2],
sd_dx[,1], sd_xx[,1],
sd_dx[,2], sd_xx[,2]), byrow = FALSE,
nrow = 4)
block_1_matrix <- rbind(row1, row2, block_1_matrix[3:4,])
block_2_matrix <- matrix(c(sd_yd, sd_yx), ncol = 1)
# Solve for the corrected parameters
solve_param <- solve(block_1_matrix) %*% block_2_matrix
solve_param
results_matrix[i,] <- c(solve_param)
print(paste0("Done with simulation ", i, "!"))
}
results_matrix
colMeans(results_matrix)
1.432
1.432-.8
-2.444- (-2)
.953 - 1.5
-.194 - (-.2)
-1.8 - (-2)
.663 - .8
1.665 - 1.5
-.264 - (-.2)
test_data <- COMMA_data(sample_size, x_mu, x_sigma, z_shape, c_shape,
interaction_indicator = TRUE,
outcome_distribution = "Normal",
true_beta, true_gamma, true_theta)
start_beta <- matrix(rep(1, 3), ncol = 1)
start_gamma <- matrix(rep(1, 4), nrow = 2, ncol = 2)
start_theta <- matrix(rep(1, 5), ncol = 1)
Mstar = test_data[["obs_mediator"]]
obs_mediator = Mstar
outcome = test_data[["outcome"]]
obs_outcome = outcome
x_matrix = test_data[["x"]]
z_matrix = test_data[["z"]]
c_matrix = test_data[["c"]]
beta_start = start_beta
gamma_start = start_gamma
theta_start = start_theta
tolerance = 1e-7
max_em_iterations = 1500
em_method = "squarem"
param_current <- c(c(beta_start), c(gamma_start), c(theta_start))
n_cat = 2 # Number of categories in mediator
sample_size = length(Mstar) # Sample size
# Create design matrices
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
# Create a matrix of observed mediator variables using dummy coding
obs_M_reps = matrix(rep(Mstar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_M_matrix = 1 * (obs_M_reps == category_matrix)
# EM algorithm settings
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
################################################################################
# Create matrix of true mediation model predictors
mediation_model_predictors <- matrix(c(test_data[["x"]], test_data[["c"]]), ncol = 2,
byrow = FALSE)
# Run the COMBO EM algorithm for the true and observed mediation model
COMBO_EM_results <- COMBO_EM_algorithm(test_data[["obs_mediator"]],
mediation_model_predictors,
test_data[["z"]],
start_beta, start_gamma)
# Save results
predicted_beta <- matrix(COMBO_EM_results$Estimates[1:3], ncol = 1)
predicted_gamma <- matrix(COMBO_EM_results$Estimates[4:7],
ncol = 2, byrow = FALSE)
# Create a matrix of observed mediator variables using dummy coding
mstar_matrix <- matrix(c(ifelse(test_data[["obs_mediator"]] == 1, 1, 0),
ifelse(test_data[["obs_mediator"]] == 2, 1, 0)),
ncol = 2, byrow = FALSE)
# Create matrix of predictors for the true mediator
X_design <- matrix(c(rep(1, sample_size), test_data[["x"]], test_data[["c"]]),
ncol = 3, byrow = FALSE)
# Generate probabilities for the true mediator value based on EM results
pi_matrix <- pi_compute(predicted_beta, X_design, sample_size, n_cat)
# Create matrix of predictors for the observed mediator
Z_design <- matrix(c(rep(1, sample_size), test_data[["z"]]),
ncol = 2, byrow = FALSE)
# Generate probabilities for observed mediator conditional on true mediator
## Based on EM results
pistar_matrix <- pistar_compute(predicted_gamma, Z_design, sample_size, n_cat)
# Estimate sensitivity and specificity
sensitivity <- pistar_matrix[1:sample_size, 1]
specificity <- pistar_matrix[(sample_size + 1):(2 * sample_size), 2]
# OLS ########################################################################
# Compute the observed mediator prevalence
prevalence <- length(which(test_data[["obs_mediator"]] == 1)) / sample_size
# Compute average misclassification rates
pistar12 <- pistar_matrix[1:sample_size, 2]
pistar21 <- pistar_matrix[(sample_size + 1):(2 * sample_size), 1]
# Compute correction parameters from Nguimkeu, Rosenman, and Tennekoon (2021)
theta_Nguimkeu <- (pistar12 + pistar21) / (1 - pistar12 - pistar21)
squiggle_Nguimkeu <- 1 - (((prevalence - pistar12)*(1 - pistar21 - prevalence)) /
((1 - pistar12 - pistar21)*(1 - prevalence)*prevalence))
# Compute covariances for the correction
interaction_term <- ifelse(test_data[["obs_mediator"]] == 1, 1, 0) * test_data[["x"]]
mstar_01 <- ifelse(test_data[["obs_mediator"]] == 1, 1, 0)
m_matrix <- matrix(c(ifelse(test_data[["obs_mediator"]] == 1, 1, 0),
interaction_term), ncol = 2, byrow = FALSE)
predictor_matrix <- matrix(c(test_data[["x"]], test_data[["c"]]), ncol = 2, byrow = FALSE)
sd_m_xm <- (1 / sample_size)*sum((ifelse(test_data[["obs_mediator"]] == 1, 1, 0) - mean(ifelse(test_data[["obs_mediator"]] == 1, 1, 0))) *
(interaction_term - mean(interaction_term)))
cov_m_xm <- cov(m_matrix)
cov_x_c <- cov(predictor_matrix)
cov_x_m <- cov(test_data[["x"]], mstar_01)
cov_m_x <- cov(mstar_01, test_data[["x"]])
cov_x_xm <- cov(test_data[["x"]], interaction_term)
cov_c_m <- cov(test_data[["c"]], mstar_01)
cov_c_xm <- cov(test_data[["c"]], interaction_term)
#sd_xd <- cov(predictor_matrix[,1], predictor_matrix[,2], m_matrix[,1], m_matrix[,2])
sd_dx <- cov(m_matrix, predictor_matrix)
y_matrix <- matrix(test_data[["outcome"]], ncol = 1)
sd_yd <- cov(y_matrix, m_matrix)
sd_yx <- cov(y_matrix, predictor_matrix)
row1 <- c((1 - median(squiggle_Nguimkeu)) * cov_m_xm[1,1],
cov_m_xm[1,2], cov_x_m, cov_c_m)
row2 <- c( (1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,1],
cov_m_xm[2,2], cov_x_xm, cov_c_xm)
block1_dd <- (1 - median(squiggle_Nguimkeu)) * sd_dd
block1_xd <- (1 + median(theta_Nguimkeu)) * sd_xd
block_1_matrix <- matrix(c(block1_dd[,1], block1_xd[,1],
block1_dd[,2], block1_xd[,2],
sd_dx[,1], sd_xx[,1],
sd_dx[,2], sd_xx[,2]), byrow = FALSE,
nrow = 4)
row1
row2
block_1_matrix
row2 <- c(cov_m_xm[2,1],
(1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,2], cov_x_xm, cov_c_xm)
row2
row2 <- c( (1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,1],
(1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,2], cov_x_xm, cov_c_xm)
block1_dd <- (1 - median(squiggle_Nguimkeu)) * sd_dd
block1_xd <- (1 + median(theta_Nguimkeu)) * sd_xd
block_1_matrix <- matrix(c(block1_dd[,1], block1_xd[,1],
block1_dd[,2], block1_xd[,2],
sd_dx[,1], sd_xx[,1],
sd_dx[,2], sd_xx[,2]), byrow = FALSE,
nrow = 4)
row2
block_1_matrix
sd_dd
sd_dd <- cov(m_matrix)
predictor_matrix <- matrix(c(test_data[["x"]], test_data[["c"]]), ncol = 2, byrow = FALSE)
sd_xx <- cov(predictor_matrix)
sd_m_xm <- (1 / sample_size)*sum((ifelse(test_data[["obs_mediator"]] == 1, 1, 0) - mean(ifelse(test_data[["obs_mediator"]] == 1, 1, 0))) *
(interaction_term - mean(interaction_term)))
cov_m_xm <- cov(m_matrix)
cov_x_c <- cov(predictor_matrix)
cov_x_m <- cov(test_data[["x"]], mstar_01)
cov_m_x <- cov(mstar_01, test_data[["x"]])
cov_x_xm <- cov(test_data[["x"]], interaction_term)
cov_c_m <- cov(test_data[["c"]], mstar_01)
cov_c_xm <- cov(test_data[["c"]], interaction_term)
sd_xd <- cov(predictor_matrix[,1], predictor_matrix[,2], m_matrix[,1], m_matrix[,2])
sd_dx <- cov(m_matrix, predictor_matrix)
#sd_xd <- cov(predictor_matrix[,1], predictor_matrix[,2], m_matrix[,1], m_matrix[,2])
sd_dx <- cov(m_matrix, predictor_matrix)
y_matrix <- matrix(test_data[["outcome"]], ncol = 1)
sd_yd <- cov(y_matrix, m_matrix)
sd_yx <- cov(y_matrix, predictor_matrix)
row1 <- c((1 - median(squiggle_Nguimkeu)) * cov_m_xm[1,1],
cov_m_xm[1,2], cov_x_m, cov_c_m)
row2 <- c( (1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,1],
(1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,2], cov_x_xm, cov_c_xm)
block1_dd <- (1 - median(squiggle_Nguimkeu)) * sd_dd
block1_xd <- (1 + median(theta_Nguimkeu)) * sd_xd
block_1_matrix <- matrix(c(block1_dd[,1], block1_xd[,1],
block1_dd[,2], block1_xd[,2],
sd_dx[,1], sd_xx[,1],
sd_dx[,2], sd_xx[,2]), byrow = FALSE,
nrow = 4)
block_1_matrix
row2
row1
n_sim <- 50
results_matrix <- matrix(NA, ncol = 4, nrow = n_sim)
for(i in 1:n_sim){
test_data <- COMMA_data(sample_size, x_mu, x_sigma, z_shape, c_shape,
interaction_indicator = TRUE,
outcome_distribution = "Normal",
true_beta, true_gamma, true_theta)
################################################################################
start_beta <- matrix(rep(1, 3), ncol = 1)
start_gamma <- matrix(rep(1, 4), nrow = 2, ncol = 2)
start_theta <- matrix(rep(1, 5), ncol = 1)
Mstar = test_data[["obs_mediator"]]
obs_mediator = Mstar
outcome = test_data[["outcome"]]
obs_outcome = outcome
x_matrix = test_data[["x"]]
z_matrix = test_data[["z"]]
c_matrix = test_data[["c"]]
beta_start = start_beta
gamma_start = start_gamma
theta_start = start_theta
tolerance = 1e-7
max_em_iterations = 1500
em_method = "squarem"
param_current <- c(c(beta_start), c(gamma_start), c(theta_start))
n_cat = 2 # Number of categories in mediator
sample_size = length(Mstar) # Sample size
# Create design matrices
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
# Create a matrix of observed mediator variables using dummy coding
obs_M_reps = matrix(rep(Mstar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_M_matrix = 1 * (obs_M_reps == category_matrix)
# EM algorithm settings
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
################################################################################
# Create matrix of true mediation model predictors
mediation_model_predictors <- matrix(c(test_data[["x"]], test_data[["c"]]), ncol = 2,
byrow = FALSE)
# Run the COMBO EM algorithm for the true and observed mediation model
COMBO_EM_results <- COMBO_EM_algorithm(test_data[["obs_mediator"]],
mediation_model_predictors,
test_data[["z"]],
start_beta, start_gamma)
# Save results
predicted_beta <- matrix(COMBO_EM_results$Estimates[1:3], ncol = 1)
predicted_gamma <- matrix(COMBO_EM_results$Estimates[4:7],
ncol = 2, byrow = FALSE)
# Create a matrix of observed mediator variables using dummy coding
mstar_matrix <- matrix(c(ifelse(test_data[["obs_mediator"]] == 1, 1, 0),
ifelse(test_data[["obs_mediator"]] == 2, 1, 0)),
ncol = 2, byrow = FALSE)
# Create matrix of predictors for the true mediator
X_design <- matrix(c(rep(1, sample_size), test_data[["x"]], test_data[["c"]]),
ncol = 3, byrow = FALSE)
# Generate probabilities for the true mediator value based on EM results
pi_matrix <- pi_compute(predicted_beta, X_design, sample_size, n_cat)
# Create matrix of predictors for the observed mediator
Z_design <- matrix(c(rep(1, sample_size), test_data[["z"]]),
ncol = 2, byrow = FALSE)
# Generate probabilities for observed mediator conditional on true mediator
## Based on EM results
pistar_matrix <- pistar_compute(predicted_gamma, Z_design, sample_size, n_cat)
# Estimate sensitivity and specificity
sensitivity <- pistar_matrix[1:sample_size, 1]
specificity <- pistar_matrix[(sample_size + 1):(2 * sample_size), 2]
# OLS ########################################################################
# Compute the observed mediator prevalence
prevalence <- length(which(test_data[["obs_mediator"]] == 1)) / sample_size
# Compute average misclassification rates
pistar12 <- pistar_matrix[1:sample_size, 2]
pistar21 <- pistar_matrix[(sample_size + 1):(2 * sample_size), 1]
# Compute correction parameters from Nguimkeu, Rosenman, and Tennekoon (2021)
theta_Nguimkeu <- (pistar12 + pistar21) / (1 - pistar12 - pistar21)
squiggle_Nguimkeu <- 1 - (((prevalence - pistar12)*(1 - pistar21 - prevalence)) /
((1 - pistar12 - pistar21)*(1 - prevalence)*prevalence))
# Compute covariances for the correction
interaction_term <- ifelse(test_data[["obs_mediator"]] == 1, 1, 0) * test_data[["x"]]
mstar_01 <- ifelse(test_data[["obs_mediator"]] == 1, 1, 0)
m_matrix <- matrix(c(ifelse(test_data[["obs_mediator"]] == 1, 1, 0),
interaction_term), ncol = 2, byrow = FALSE)
sd_dd <- cov(m_matrix)
predictor_matrix <- matrix(c(test_data[["x"]], test_data[["c"]]), ncol = 2, byrow = FALSE)
sd_xx <- cov(predictor_matrix)
sd_m_xm <- (1 / sample_size)*sum((ifelse(test_data[["obs_mediator"]] == 1, 1, 0) - mean(ifelse(test_data[["obs_mediator"]] == 1, 1, 0))) *
(interaction_term - mean(interaction_term)))
cov_m_xm <- cov(m_matrix)
cov_x_c <- cov(predictor_matrix)
cov_x_m <- cov(test_data[["x"]], mstar_01)
cov_m_x <- cov(mstar_01, test_data[["x"]])
cov_x_xm <- cov(test_data[["x"]], interaction_term)
cov_c_m <- cov(test_data[["c"]], mstar_01)
cov_c_xm <- cov(test_data[["c"]], interaction_term)
#sd_xd <- cov(predictor_matrix[,1], predictor_matrix[,2], m_matrix[,1], m_matrix[,2])
sd_dx <- cov(m_matrix, predictor_matrix)
y_matrix <- matrix(test_data[["outcome"]], ncol = 1)
sd_yd <- cov(y_matrix, m_matrix)
sd_yx <- cov(y_matrix, predictor_matrix)
row1 <- c((1 - median(squiggle_Nguimkeu)) * cov_m_xm[1,1],
cov_m_xm[1,2], cov_x_m, cov_c_m)
row2 <- c(cov_m_xm[2,1],
(1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,2], cov_x_xm, cov_c_xm)
block1_dd <- (1 - median(squiggle_Nguimkeu)) * sd_dd
block1_xd <- (1 + median(theta_Nguimkeu)) * sd_xd
block_1_matrix <- matrix(c(block1_dd[,1], block1_xd[,1],
block1_dd[,2], block1_xd[,2],
sd_dx[,1], sd_xx[,1],
sd_dx[,2], sd_xx[,2]), byrow = FALSE,
nrow = 4)
block_1_matrix <- rbind(row1, row2, block_1_matrix[3:4,])
block_2_matrix <- matrix(c(sd_yd, sd_yx), ncol = 1)
# Solve for the corrected parameters
solve_param <- solve(block_1_matrix) %*% block_2_matrix
solve_param
results_matrix[i,] <- c(solve_param)
print(paste0("Done with simulation ", i, "!"))
}
colMeans(results_matrix)
table(Mstar, test_data[["true_mediator"]])
cov_x_m
cov_x_xm
cov_x_c
row1 <- c((1 - median(squiggle_Nguimkeu)) * cov_m_xm[1,1],
cov_m_xm[1,2], cov_x_m, cov_c_m)
row2 <- c(cov_m_xm[2,1],
(1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,2], cov_x_xm, cov_c_xm)
row3 <- c((1 + median(theta_Nguimkeu)) * cov_x_m, cov_x_xm,
cov_x_c[1,1], cov_x_c[1,2])
row4 <- c((1 + median(theta_Nguimkeu)) * cov_c_m, cov_c_xm,
cov_x_c[2,1], cov_x_c[2,2])
block_1_matrix <- matrix(c(row1, row2, row3, row4),
nrow = 4, byrow = TRUE)
row1 <- c((1 - median(squiggle_Nguimkeu)) * cov_m_xm[1,1],
cov_m_xm[1,2], cov_x_m, cov_c_m)
row2 <- c(cov_m_xm[2,1],
(1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,2], cov_x_xm, cov_c_xm)
row3 <- c((1 + median(theta_Nguimkeu)) * cov_x_m, cov_x_xm,
cov_x_c[1,1], cov_x_c[1,2])
row4 <- c((1 + median(theta_Nguimkeu)) * cov_c_m, cov_c_xm,
cov_x_c[2,1], cov_x_c[2,2])
block1_dd <- (1 - median(squiggle_Nguimkeu)) * sd_dd
block1_xd <- (1 + median(theta_Nguimkeu)) * sd_xd
block_1_matrix <- matrix(c(block1_dd[,1], block1_xd[,1],
block1_dd[,2], block1_xd[,2],
sd_dx[,1], sd_xx[,1],
sd_dx[,2], sd_xx[,2]), byrow = FALSE,
nrow = 4)
block_1_matrix <- matrix(c(row1, row2, row3, row4),
nrow = 4, byrow = TRUE)
block_1_matrix
block_1_matrix <- matrix(c(block1_dd[,1], block1_xd[,1],
block1_dd[,2], block1_xd[,2],
sd_dx[,1], sd_xx[,1],
sd_dx[,2], sd_xx[,2]), byrow = FALSE,
nrow = 4)
block_1_matrix
n_sim <- 50
results_matrix <- matrix(NA, ncol = 4, nrow = n_sim)
for(i in 1:n_sim){
test_data <- COMMA_data(sample_size, x_mu, x_sigma, z_shape, c_shape,
interaction_indicator = TRUE,
outcome_distribution = "Normal",
true_beta, true_gamma, true_theta)
################################################################################
start_beta <- matrix(rep(1, 3), ncol = 1)
start_gamma <- matrix(rep(1, 4), nrow = 2, ncol = 2)
start_theta <- matrix(rep(1, 5), ncol = 1)
Mstar = test_data[["obs_mediator"]]
obs_mediator = Mstar
outcome = test_data[["outcome"]]
obs_outcome = outcome
x_matrix = test_data[["x"]]
z_matrix = test_data[["z"]]
c_matrix = test_data[["c"]]
beta_start = start_beta
gamma_start = start_gamma
theta_start = start_theta
tolerance = 1e-7
max_em_iterations = 1500
em_method = "squarem"
param_current <- c(c(beta_start), c(gamma_start), c(theta_start))
n_cat = 2 # Number of categories in mediator
sample_size = length(Mstar) # Sample size
# Create design matrices
X = matrix(c(rep(1, sample_size), c(x_matrix)),
byrow = FALSE, nrow = sample_size)
Z = matrix(c(rep(1, sample_size), c(z_matrix)),
byrow = FALSE, nrow = sample_size)
# Create a matrix of observed mediator variables using dummy coding
obs_M_reps = matrix(rep(Mstar, n_cat), nrow = sample_size, byrow = FALSE)
category_matrix = matrix(rep(1:n_cat, each = sample_size), nrow = sample_size,
byrow = FALSE)
obs_M_matrix = 1 * (obs_M_reps == category_matrix)
# EM algorithm settings
control_settings = list(convtype = "parameter", tol = tolerance,
stoptype = "maxiter", maxiter = max_em_iterations)
################################################################################
# Create matrix of true mediation model predictors
mediation_model_predictors <- matrix(c(test_data[["x"]], test_data[["c"]]), ncol = 2,
byrow = FALSE)
# Run the COMBO EM algorithm for the true and observed mediation model
COMBO_EM_results <- COMBO_EM_algorithm(test_data[["obs_mediator"]],
mediation_model_predictors,
test_data[["z"]],
start_beta, start_gamma)
# Save results
predicted_beta <- matrix(COMBO_EM_results$Estimates[1:3], ncol = 1)
predicted_gamma <- matrix(COMBO_EM_results$Estimates[4:7],
ncol = 2, byrow = FALSE)
# Create a matrix of observed mediator variables using dummy coding
mstar_matrix <- matrix(c(ifelse(test_data[["obs_mediator"]] == 1, 1, 0),
ifelse(test_data[["obs_mediator"]] == 2, 1, 0)),
ncol = 2, byrow = FALSE)
# Create matrix of predictors for the true mediator
X_design <- matrix(c(rep(1, sample_size), test_data[["x"]], test_data[["c"]]),
ncol = 3, byrow = FALSE)
# Generate probabilities for the true mediator value based on EM results
pi_matrix <- pi_compute(predicted_beta, X_design, sample_size, n_cat)
# Create matrix of predictors for the observed mediator
Z_design <- matrix(c(rep(1, sample_size), test_data[["z"]]),
ncol = 2, byrow = FALSE)
# Generate probabilities for observed mediator conditional on true mediator
## Based on EM results
pistar_matrix <- pistar_compute(predicted_gamma, Z_design, sample_size, n_cat)
# Estimate sensitivity and specificity
sensitivity <- pistar_matrix[1:sample_size, 1]
specificity <- pistar_matrix[(sample_size + 1):(2 * sample_size), 2]
# OLS ########################################################################
# Compute the observed mediator prevalence
prevalence <- length(which(test_data[["obs_mediator"]] == 1)) / sample_size
# Compute average misclassification rates
pistar12 <- pistar_matrix[1:sample_size, 2]
pistar21 <- pistar_matrix[(sample_size + 1):(2 * sample_size), 1]
# Compute correction parameters from Nguimkeu, Rosenman, and Tennekoon (2021)
theta_Nguimkeu <- (pistar12 + pistar21) / (1 - pistar12 - pistar21)
squiggle_Nguimkeu <- 1 - (((prevalence - pistar12)*(1 - pistar21 - prevalence)) /
((1 - pistar12 - pistar21)*(1 - prevalence)*prevalence))
# Compute covariances for the correction
interaction_term <- ifelse(test_data[["obs_mediator"]] == 1, 1, 0) * test_data[["x"]]
mstar_01 <- ifelse(test_data[["obs_mediator"]] == 1, 1, 0)
m_matrix <- matrix(c(ifelse(test_data[["obs_mediator"]] == 1, 1, 0),
interaction_term), ncol = 2, byrow = FALSE)
sd_dd <- cov(m_matrix)
predictor_matrix <- matrix(c(test_data[["x"]], test_data[["c"]]), ncol = 2, byrow = FALSE)
sd_xx <- cov(predictor_matrix)
sd_m_xm <- (1 / sample_size)*sum((ifelse(test_data[["obs_mediator"]] == 1, 1, 0) - mean(ifelse(test_data[["obs_mediator"]] == 1, 1, 0))) *
(interaction_term - mean(interaction_term)))
cov_m_xm <- cov(m_matrix)
cov_x_c <- cov(predictor_matrix)
cov_x_m <- cov(test_data[["x"]], mstar_01)
cov_m_x <- cov(mstar_01, test_data[["x"]])
cov_x_xm <- cov(test_data[["x"]], interaction_term)
cov_c_m <- cov(test_data[["c"]], mstar_01)
cov_c_xm <- cov(test_data[["c"]], interaction_term)
#sd_xd <- cov(predictor_matrix[,1], predictor_matrix[,2], m_matrix[,1], m_matrix[,2])
sd_dx <- cov(m_matrix, predictor_matrix)
y_matrix <- matrix(test_data[["outcome"]], ncol = 1)
sd_yd <- cov(y_matrix, m_matrix)
sd_yx <- cov(y_matrix, predictor_matrix)
row1 <- c((1 - median(squiggle_Nguimkeu)) * cov_m_xm[1,1],
cov_m_xm[1,2], cov_x_m, cov_c_m)
row2 <- c(cov_m_xm[2,1],
(1 - median(squiggle_Nguimkeu)) * cov_m_xm[2,2], cov_x_xm, cov_c_xm)
row3 <- c((1 + median(theta_Nguimkeu)) * cov_x_m, cov_x_xm,
cov_x_c[1,1], cov_x_c[1,2])
row4 <- c((1 + median(theta_Nguimkeu)) * cov_c_m, cov_c_xm,
cov_x_c[2,1], cov_x_c[2,2])
block1_dd <- (1 - median(squiggle_Nguimkeu)) * sd_dd
block1_xd <- (1 + median(theta_Nguimkeu)) * sd_xd
block_1_matrix <- matrix(c(block1_dd[,1], block1_xd[,1],
block1_dd[,2], block1_xd[,2],
sd_dx[,1], sd_xx[,1],
sd_dx[,2], sd_xx[,2]), byrow = FALSE,
nrow = 4)
#block_1_matrix <- rbind(row1, row2, block_1_matrix[3:4,])
block_1_matrix <- matrix(c(row1, row2, row3, row4),
nrow = 4, byrow = TRUE)
block_2_matrix <- matrix(c(sd_yd, sd_yx), ncol = 1)
# Solve for the corrected parameters
solve_param <- solve(block_1_matrix) %*% block_2_matrix
solve_param
results_matrix[i,] <- c(solve_param)
print(paste0("Done with simulation ", i, "!"))
}
colMeans(results_matrix)
